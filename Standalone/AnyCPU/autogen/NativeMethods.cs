// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2025 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if STEAMWORKS_STANDALONE_ANYCPU

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;
using Environment = System.Environment;

#pragma warning disable IDE0130
namespace Steamworks {
#pragma warning restore
	[System.Security.SuppressUnmanagedCodeSecurity()]
	internal static class NativeMethods {
	// !!!! Changes made to steamapi free functions should also sync with other nativemethods*.txt too. !!!!

#region steam_api.h
		public static ESteamAPIInitResult SteamInternal_SteamAPI_Init(InteropHelp.UTF8StringHandle pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_SteamAPI_Init(pszInternalCheckInterfaceVersions, pOutErrMsg);
			} else {
				return NativeMethodsUnderlying.SteamInternal_SteamAPI_Init(pszInternalCheckInterfaceVersions, pOutErrMsg);
			}
		}

		public static void SteamAPI_Shutdown() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_Shutdown();
			} else {
				NativeMethodsUnderlying.SteamAPI_Shutdown();
			}
		}
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			} else {
				return NativeMethodsUnderlying.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}
		}

		public static void SteamAPI_ReleaseCurrentThreadMemory() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ReleaseCurrentThreadMemory();
			} else {
				NativeMethodsUnderlying.SteamAPI_ReleaseCurrentThreadMemory();
			}
		}

		public static void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_WriteMiniDump(uStructuredExceptionCode, pvExceptionInfo, uBuildID);
			} else {
				NativeMethodsUnderlying.SteamAPI_WriteMiniDump(uStructuredExceptionCode, pvExceptionInfo, uBuildID);
			}
		}

		public static void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetMiniDumpComment(pchMsg);
			} else {
				NativeMethodsUnderlying.SteamAPI_SetMiniDumpComment(pchMsg);
			}
		}

		public static void SteamAPI_RunCallbacks() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RunCallbacks();
			} else {
				NativeMethodsUnderlying.SteamAPI_RunCallbacks();
			}
		}

		public static void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RegisterCallback(pCallback, iCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_RegisterCallback(pCallback, iCallback);
			}
		}

		public static void SteamAPI_UnregisterCallback(IntPtr pCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UnregisterCallback(pCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_UnregisterCallback(pCallback);
			}
		}

		public static void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RegisterCallResult(pCallback, hAPICall);
			} else {
				NativeMethodsUnderlying.SteamAPI_RegisterCallResult(pCallback, hAPICall);
			}
		}

		public static void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UnregisterCallResult(pCallback, hAPICall);
			} else {
				NativeMethodsUnderlying.SteamAPI_UnregisterCallResult(pCallback, hAPICall);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_IsSteamRunning() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_IsSteamRunning();
			} else {
				return NativeMethodsUnderlying.SteamAPI_IsSteamRunning();
			}
		}

		public static int SteamAPI_GetSteamInstallPath() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetSteamInstallPath();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetSteamInstallPath();
			}
		}

		public static int SteamAPI_GetHSteamPipe() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetHSteamPipe();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetHSteamPipe();
			}
		}

		public static void SteamAPI_SetTryCatchCallbacks([MarshalAs(UnmanagedType.I1)] bool bTryCatchCallbacks) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetTryCatchCallbacks(bTryCatchCallbacks);
			} else {
				NativeMethodsUnderlying.SteamAPI_SetTryCatchCallbacks(bTryCatchCallbacks);
			}
		}

		public static int SteamAPI_GetHSteamUser() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetHSteamUser();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetHSteamUser();
			}
		}

		public static IntPtr SteamInternal_ContextInit(IntPtr pContextInitData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_ContextInit(pContextInitData);
			} else {
				return NativeMethodsUnderlying.SteamInternal_ContextInit(pContextInitData);
			}
		}

		public static IntPtr SteamInternal_CreateInterface(InteropHelp.UTF8StringHandle ver) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_CreateInterface(ver);
			} else {
				return NativeMethodsUnderlying.SteamInternal_CreateInterface(ver);
			}
		}

		public static IntPtr SteamInternal_FindOrCreateUserInterface(HSteamUser hSteamUser, InteropHelp.UTF8StringHandle pszVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			} else {
				return NativeMethodsUnderlying.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			}
		}

		public static IntPtr SteamInternal_FindOrCreateGameServerInterface(HSteamUser hSteamUser, InteropHelp.UTF8StringHandle pszVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			} else {
				return NativeMethodsUnderlying.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			}
		}

		public static void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, [MarshalAs(UnmanagedType.I1)] bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UseBreakpadCrashHandler(pchVersion, pchDate, pchTime, bFullMemoryDumps, pvContext, m_pfnPreMinidumpCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_UseBreakpadCrashHandler(pchVersion, pchDate, pchTime, bFullMemoryDumps, pvContext, m_pfnPreMinidumpCallback);
			}
		}

		public static void SteamAPI_SetBreakpadAppID(uint unAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetBreakpadAppID(unAppID);
			} else { 
				NativeMethodsUnderlying.SteamAPI_SetBreakpadAppID(unAppID);
			}
		}

		public static void SteamAPI_ManualDispatch_Init() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_Init();
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_Init();
			}
		}

		public static void SteamAPI_ManualDispatch_RunFrame(HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_RunFrame(hSteamPipe);
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_RunFrame(hSteamPipe);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ManualDispatch_GetNextCallback(HSteamPipe hSteamPipe, IntPtr pCallbackMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_GetNextCallback(hSteamPipe, pCallbackMsg);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ManualDispatch_GetNextCallback(hSteamPipe, pCallbackMsg);
			}
		}

		public static void SteamAPI_ManualDispatch_FreeLastCallback(HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_FreeLastCallback(hSteamPipe);
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_FreeLastCallback(hSteamPipe);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ManualDispatch_GetAPICallResult(HSteamPipe hSteamPipe, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_GetAPICallResult(hSteamPipe, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ManualDispatch_GetAPICallResult(hSteamPipe, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			}
		}
		#endregion
		#region steam_gameserver.h
		public static void SteamGameServer_Shutdown() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_Shutdown();
			} else {
				NativeMethodsUnderlying.SteamGameServer_Shutdown();
			}
		}

		public static void SteamGameServer_RunCallbacks() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_RunCallbacks();
			} else {
				NativeMethodsUnderlying.SteamGameServer_RunCallbacks();
			}
		}

		public static void SteamGameServer_ReleaseCurrentThreadMemory() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_ReleaseCurrentThreadMemory();
			} else {
				NativeMethodsUnderlying.SteamGameServer_ReleaseCurrentThreadMemory();
			}
		}
		// 写好的方法复制到nativemethods_anycpu.txt

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamGameServer_BSecure() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_BSecure();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_BSecure();
			}
		}

		public static ulong SteamGameServer_GetSteamID() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetSteamID();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetSteamID();
			}
		}

		public static int SteamGameServer_GetHSteamPipe() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetHSteamPipe();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetHSteamPipe();
			}
		}

		public static int SteamGameServer_GetHSteamUser() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetHSteamUser();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetHSteamUser();
			}
		}

		public static ESteamAPIInitResult SteamInternal_GameServer_Init_V2(uint unIP, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString, InteropHelp.UTF8StringHandle pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg) {
			{
				if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
					return NativeMethodsUnderlyingWin64.SteamInternal_GameServer_Init_V2(unIP, usGamePort, usQueryPort, eServerMode, pchVersionString, pszInternalCheckInterfaceVersions, pOutErrMsg);
				} else {
					return NativeMethodsUnderlying.SteamInternal_GameServer_Init_V2(unIP, usGamePort, usQueryPort, eServerMode, pchVersionString, pszInternalCheckInterfaceVersions, pOutErrMsg);
				}
			}
		}
#endregion
#region SteamAPI Accessors
		public static IntPtr SteamClient() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamClient();
			} else {
				return NativeMethodsUnderlying.SteamClient();
			}
		}

		public static IntPtr SteamGameServerClient() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServerClient();
			} else {
				return NativeMethodsUnderlying.SteamGameServerClient();
			}
		}
		#endregion
		#region SteamNetworkingIPAddr Accessors
		public static void SteamAPI_SteamNetworkingIPAddr_Clear(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_Clear(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_Clear(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref SteamNetworkingIPAddr self, [In, Out] byte[] ipv6, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref self, ipv6, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref self, ipv6, nPort);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref SteamNetworkingIPAddr self, uint nIP, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref self, nIP, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref self, nIP, nPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref self);
			}
		}

		public static uint SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref SteamNetworkingIPAddr self, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref self, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref self, nPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_ToString(ref SteamNetworkingIPAddr self, IntPtr buf, uint cbBuf, [MarshalAs(UnmanagedType.I1)] bool bWithPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_ToString(ref self, buf, cbBuf, bWithPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_ToString(ref self, buf, cbBuf, bWithPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_ParseString(ref SteamNetworkingIPAddr self, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_ParseString(ref self, pszStr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_ParseString(ref self, pszStr);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref SteamNetworkingIPAddr self, ref SteamNetworkingIPAddr x) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref self, ref x);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref self, ref x);
			}
		}

		public static ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref self);
			}
		}
		#endregion
		#region SteamNetworkingIdentity Accessors
		public static void SteamAPI_SteamNetworkingIdentity_Clear(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_Clear(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_Clear(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsInvalid(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsInvalid(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsInvalid(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetSteamID(ref SteamNetworkingIdentity self, ulong steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetSteamID(ref self, steamID);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetSteamID(ref self, steamID);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetSteamID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetSteamID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetSteamID(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref SteamNetworkingIdentity self, ulong steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref self, steamID);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref self, steamID);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref self, pszString);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref self, pszString);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetPSNID(ref SteamNetworkingIdentity self, ulong id) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetPSNID(ref self, id);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetPSNID(ref self, id);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetPSNID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetPSNID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetPSNID(ref self);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref SteamNetworkingIdentity self, ref SteamNetworkingIPAddr addr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref self, ref addr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref self, ref addr);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref SteamNetworkingIdentity self, uint nIPv4, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref self, nIPv4, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref self, nIPv4, nPort);
			}
		}

		public static uint SteamAPI_SteamNetworkingIdentity_GetIPv4(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetIPv4(ref self);
			}
		}

		public static ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetGenericString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetGenericString(ref self, pszString);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetGenericString(ref self, pszString);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericString(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetGenericString(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetGenericString(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref SteamNetworkingIdentity self, [In, Out] byte[] data, uint cbLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref self, data, cbLen);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref self, data, cbLen);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref SteamNetworkingIdentity self, out int cbLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref self, out cbLen);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref self, out cbLen);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref SteamNetworkingIdentity self, ref SteamNetworkingIdentity x) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref self, ref x);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref self, ref x);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_ToString(ref SteamNetworkingIdentity self, IntPtr buf, uint cbBuf) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_ToString(ref self, buf, cbBuf);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_ToString(ref self, buf, cbBuf);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_ParseString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_ParseString(ref self, pszStr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_ParseString(ref self, pszStr);
			}
		}
		#endregion
		#region SteamNetworkingMessage_t Accessors
		public static void SteamAPI_SteamNetworkingMessage_t_Release(IntPtr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingMessage_t_Release(self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingMessage_t_Release(self);
			}
		}
		#endregion
		#region ISteamNetworkingConnectionSignaling Accessors
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref ISteamNetworkingConnectionSignaling self, HSteamNetConnection hConn, ref SteamNetConnectionInfo_t info, IntPtr pMsg, int cbMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref self, hConn, ref info, pMsg, cbMsg);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref self, hConn, ref info, pMsg, cbMsg);
			}
		}

		public static void SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref ISteamNetworkingConnectionSignaling self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref self);
			}
		}
		#endregion
		#region ISteamNetworkingSignalingRecvContext Accessors
		public static IntPtr SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref ISteamNetworkingSignalingRecvContext self,
			HSteamNetConnection hConn, ref SteamNetworkingIdentity identityPeer, int nLocalVirtualPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref self, hConn, ref identityPeer, nLocalVirtualPort);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref self, hConn, ref identityPeer, nLocalVirtualPort);
			}
		}

		public static void SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref ISteamNetworkingSignalingRecvContext self,
			ref SteamNetworkingIdentity identityPeer, IntPtr pMsg, int cbMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref self, ref identityPeer, pMsg, cbMsg);
			} else {
				NativeMethodsUnderlying.SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref self, ref identityPeer, pMsg, cbMsg);
			}
		}
		#endregion
		#region steamencryptedappticket.h
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BDecryptTicket([In, Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted,
			[In, Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted,
			[MarshalAs(UnmanagedType.LPArray, SizeConst=Constants.k_nSteamEncryptedAppTicketSymmetricKeyLen)] byte[] rgubKey, int cubKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BDecryptTicket(rgubTicketEncrypted, cubTicketEncrypted, rgubTicketDecrypted, ref pcubTicketDecrypted,
					rgubKey, cubKey);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BDecryptTicket(rgubTicketEncrypted, cubTicketEncrypted, rgubTicketDecrypted, ref pcubTicketDecrypted,
					rgubKey, cubKey);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsTicketForApp([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsTicketForApp(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsTicketForApp(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			}
		}

		public static uint SteamEncryptedAppTicket_GetTicketIssueTime([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketIssueTime(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketIssueTime(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		public static void SteamEncryptedAppTicket_GetTicketSteamID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketSteamID(rgubTicketDecrypted, cubTicketDecrypted, out psteamID);
			} else {
				NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketSteamID(rgubTicketDecrypted, cubTicketDecrypted, out psteamID);
			}
		}

		public static uint SteamEncryptedAppTicket_GetTicketAppID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketAppID(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketAppID(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BUserOwnsAppInTicket([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BUserOwnsAppInTicket(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BUserOwnsAppInTicket(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BUserIsVacBanned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BUserIsVacBanned(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BUserIsVacBanned(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		public static IntPtr SteamEncryptedAppTicket_GetUserVariableData([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetUserVariableData(rgubTicketDecrypted, cubTicketDecrypted, out pcubUserData);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetUserVariableData(rgubTicketDecrypted, cubTicketDecrypted, out pcubUserData);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsTicketSigned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, [In, Out] byte[] pubRSAKey, uint cubRSAKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsTicketSigned(rgubTicketDecrypted, cubTicketDecrypted, pubRSAKey, cubRSAKey);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsTicketSigned(rgubTicketDecrypted, cubTicketDecrypted, pubRSAKey, cubRSAKey);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsLicenseBorrowed([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsLicenseBorrowed(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsLicenseBorrowed(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsLicenseTemporary([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsLicenseTemporary(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsLicenseTemporary(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}
#endregion
		public static bool ISteamApps_BIsSubscribed(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsSubscribed(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsSubscribed(instancePtr);
			}
		}

		public static bool ISteamApps_BIsLowViolence(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsLowViolence(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsLowViolence(instancePtr);
			}
		}

		public static bool ISteamApps_BIsCybercafe(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsCybercafe(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsCybercafe(instancePtr);
			}
		}

		public static bool ISteamApps_BIsVACBanned(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsVACBanned(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsVACBanned(instancePtr);
			}
		}

		public static IntPtr ISteamApps_GetCurrentGameLanguage(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetCurrentGameLanguage(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetCurrentGameLanguage(instancePtr);
			}
		}

		public static IntPtr ISteamApps_GetAvailableGameLanguages(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetAvailableGameLanguages(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetAvailableGameLanguages(instancePtr);
			}
		}

		public static bool ISteamApps_BIsSubscribedApp(IntPtr instancePtr, AppId_t appID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsSubscribedApp(instancePtr, appID);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsSubscribedApp(instancePtr, appID);
			}
		}

		public static bool ISteamApps_BIsDlcInstalled(IntPtr instancePtr, AppId_t appID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsDlcInstalled(instancePtr, appID);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsDlcInstalled(instancePtr, appID);
			}
		}

		public static uint ISteamApps_GetEarliestPurchaseUnixTime(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetEarliestPurchaseUnixTime(instancePtr, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetEarliestPurchaseUnixTime(instancePtr, nAppID);
			}
		}

		public static bool ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsSubscribedFromFreeWeekend(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsSubscribedFromFreeWeekend(instancePtr);
			}
		}

		public static int ISteamApps_GetDLCCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetDLCCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetDLCCount(instancePtr);
			}
		}

		public static bool ISteamApps_BGetDLCDataByIndex(IntPtr instancePtr, int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BGetDLCDataByIndex(instancePtr, iDLC, out pAppID, out pbAvailable, pchName, cchNameBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BGetDLCDataByIndex(instancePtr, iDLC, out pAppID, out pbAvailable, pchName, cchNameBufferSize);
			}
		}

		public static void ISteamApps_InstallDLC(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamApps_InstallDLC(instancePtr, nAppID);
			} else {
				NativeMethodsUnderlying.ISteamApps_InstallDLC(instancePtr, nAppID);
			}
		}

		public static void ISteamApps_UninstallDLC(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamApps_UninstallDLC(instancePtr, nAppID);
			} else {
				NativeMethodsUnderlying.ISteamApps_UninstallDLC(instancePtr, nAppID);
			}
		}

		public static void ISteamApps_RequestAppProofOfPurchaseKey(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamApps_RequestAppProofOfPurchaseKey(instancePtr, nAppID);
			} else {
				NativeMethodsUnderlying.ISteamApps_RequestAppProofOfPurchaseKey(instancePtr, nAppID);
			}
		}

		public static bool ISteamApps_GetCurrentBetaName(IntPtr instancePtr, IntPtr pchName, int cchNameBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetCurrentBetaName(instancePtr, pchName, cchNameBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetCurrentBetaName(instancePtr, pchName, cchNameBufferSize);
			}
		}

		public static bool ISteamApps_MarkContentCorrupt(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bMissingFilesOnly) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_MarkContentCorrupt(instancePtr, bMissingFilesOnly);
			} else {
				return NativeMethodsUnderlying.ISteamApps_MarkContentCorrupt(instancePtr, bMissingFilesOnly);
			}
		}

		public static uint ISteamApps_GetInstalledDepots(IntPtr instancePtr, AppId_t appID, [In, Out] DepotId_t[] pvecDepots, uint cMaxDepots) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetInstalledDepots(instancePtr, appID, pvecDepots, cMaxDepots);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetInstalledDepots(instancePtr, appID, pvecDepots, cMaxDepots);
			}
		}

		public static uint ISteamApps_GetAppInstallDir(IntPtr instancePtr, AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetAppInstallDir(instancePtr, appID, pchFolder, cchFolderBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetAppInstallDir(instancePtr, appID, pchFolder, cchFolderBufferSize);
			}
		}

		public static bool ISteamApps_BIsAppInstalled(IntPtr instancePtr, AppId_t appID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsAppInstalled(instancePtr, appID);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsAppInstalled(instancePtr, appID);
			}
		}

		public static ulong ISteamApps_GetAppOwner(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetAppOwner(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetAppOwner(instancePtr);
			}
		}

		public static IntPtr ISteamApps_GetLaunchQueryParam(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetLaunchQueryParam(instancePtr, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetLaunchQueryParam(instancePtr, pchKey);
			}
		}

		public static bool ISteamApps_GetDlcDownloadProgress(IntPtr instancePtr, AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetDlcDownloadProgress(instancePtr, nAppID, out punBytesDownloaded, out punBytesTotal);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetDlcDownloadProgress(instancePtr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}
		}

		public static int ISteamApps_GetAppBuildId(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetAppBuildId(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetAppBuildId(instancePtr);
			}
		}

		public static void ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamApps_RequestAllProofOfPurchaseKeys(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamApps_RequestAllProofOfPurchaseKeys(instancePtr);
			}
		}

		public static ulong ISteamApps_GetFileDetails(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszFileName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetFileDetails(instancePtr, pszFileName);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetFileDetails(instancePtr, pszFileName);
			}
		}

		public static int ISteamApps_GetLaunchCommandLine(IntPtr instancePtr, IntPtr pszCommandLine, int cubCommandLine) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetLaunchCommandLine(instancePtr, pszCommandLine, cubCommandLine);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetLaunchCommandLine(instancePtr, pszCommandLine, cubCommandLine);
			}
		}

		public static bool ISteamApps_BIsSubscribedFromFamilySharing(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsSubscribedFromFamilySharing(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsSubscribedFromFamilySharing(instancePtr);
			}
		}

		public static bool ISteamApps_BIsTimedTrial(IntPtr instancePtr, out uint punSecondsAllowed, out uint punSecondsPlayed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_BIsTimedTrial(instancePtr, out punSecondsAllowed, out punSecondsPlayed);
			} else {
				return NativeMethodsUnderlying.ISteamApps_BIsTimedTrial(instancePtr, out punSecondsAllowed, out punSecondsPlayed);
			}
		}

		public static bool ISteamApps_SetDlcContext(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_SetDlcContext(instancePtr, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamApps_SetDlcContext(instancePtr, nAppID);
			}
		}

		public static int ISteamApps_GetNumBetas(IntPtr instancePtr, out int pnAvailable, out int pnPrivate) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetNumBetas(instancePtr, out pnAvailable, out pnPrivate);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetNumBetas(instancePtr, out pnAvailable, out pnPrivate);
			}
		}

		public static bool ISteamApps_GetBetaInfo(IntPtr instancePtr, int iBetaIndex, out uint punFlags, out uint punBuildID, IntPtr pchBetaName, int cchBetaName, IntPtr pchDescription, int cchDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_GetBetaInfo(instancePtr, iBetaIndex, out punFlags, out punBuildID, pchBetaName, cchBetaName, pchDescription, cchDescription);
			} else {
				return NativeMethodsUnderlying.ISteamApps_GetBetaInfo(instancePtr, iBetaIndex, out punFlags, out punBuildID, pchBetaName, cchBetaName, pchDescription, cchDescription);
			}
		}

		public static bool ISteamApps_SetActiveBeta(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchBetaName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamApps_SetActiveBeta(instancePtr, pchBetaName);
			} else {
				return NativeMethodsUnderlying.ISteamApps_SetActiveBeta(instancePtr, pchBetaName);
			}
		}

		public static int ISteamClient_CreateSteamPipe(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_CreateSteamPipe(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamClient_CreateSteamPipe(instancePtr);
			}
		}

		public static bool ISteamClient_BReleaseSteamPipe(IntPtr instancePtr, HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_BReleaseSteamPipe(instancePtr, hSteamPipe);
			} else {
				return NativeMethodsUnderlying.ISteamClient_BReleaseSteamPipe(instancePtr, hSteamPipe);
			}
		}

		public static int ISteamClient_ConnectToGlobalUser(IntPtr instancePtr, HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_ConnectToGlobalUser(instancePtr, hSteamPipe);
			} else {
				return NativeMethodsUnderlying.ISteamClient_ConnectToGlobalUser(instancePtr, hSteamPipe);
			}
		}

		public static int ISteamClient_CreateLocalUser(IntPtr instancePtr, out HSteamPipe phSteamPipe, EAccountType eAccountType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_CreateLocalUser(instancePtr, out phSteamPipe, eAccountType);
			} else {
				return NativeMethodsUnderlying.ISteamClient_CreateLocalUser(instancePtr, out phSteamPipe, eAccountType);
			}
		}

		public static void ISteamClient_ReleaseUser(IntPtr instancePtr, HSteamPipe hSteamPipe, HSteamUser hUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamClient_ReleaseUser(instancePtr, hSteamPipe, hUser);
			} else {
				NativeMethodsUnderlying.ISteamClient_ReleaseUser(instancePtr, hSteamPipe, hUser);
			}
		}

		public static IntPtr ISteamClient_GetISteamUser(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamUser(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamUser(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamGameServer(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamGameServer(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamGameServer(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static void ISteamClient_SetLocalIPBinding(IntPtr instancePtr, ref SteamIPAddress_t unIP, ushort usPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamClient_SetLocalIPBinding(instancePtr, ref unIP, usPort);
			} else {
				NativeMethodsUnderlying.ISteamClient_SetLocalIPBinding(instancePtr, ref unIP, usPort);
			}
		}

		public static IntPtr ISteamClient_GetISteamFriends(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamFriends(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamFriends(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamUtils(IntPtr instancePtr, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamUtils(instancePtr, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamUtils(instancePtr, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamMatchmaking(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamMatchmaking(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamMatchmaking(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamMatchmakingServers(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamMatchmakingServers(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamMatchmakingServers(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamGenericInterface(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamGenericInterface(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamGenericInterface(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamUserStats(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamUserStats(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamUserStats(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamGameServerStats(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamGameServerStats(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamGameServerStats(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamApps(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamApps(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamApps(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamNetworking(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamNetworking(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamNetworking(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamRemoteStorage(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamRemoteStorage(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamRemoteStorage(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamScreenshots(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamScreenshots(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamScreenshots(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamGameSearch(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamGameSearch(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamGameSearch(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static uint ISteamClient_GetIPCCallCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetIPCCallCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetIPCCallCount(instancePtr);
			}
		}

		public static void ISteamClient_SetWarningMessageHook(IntPtr instancePtr, SteamAPIWarningMessageHook_t pFunction) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamClient_SetWarningMessageHook(instancePtr, pFunction);
			} else {
				NativeMethodsUnderlying.ISteamClient_SetWarningMessageHook(instancePtr, pFunction);
			}
		}

		public static bool ISteamClient_BShutdownIfAllPipesClosed(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_BShutdownIfAllPipesClosed(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamClient_BShutdownIfAllPipesClosed(instancePtr);
			}
		}

		public static IntPtr ISteamClient_GetISteamHTTP(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamHTTP(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamHTTP(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamController(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamController(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamController(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamUGC(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamUGC(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamUGC(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamMusic(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamMusic(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamMusic(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamMusicRemote(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamMusicRemote(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamMusicRemote(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamHTMLSurface(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamHTMLSurface(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamHTMLSurface(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamInventory(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamInventory(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamInventory(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamVideo(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamVideo(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamVideo(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamParentalSettings(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamParentalSettings(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamParentalSettings(instancePtr, hSteamuser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamInput(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamInput(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamInput(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamParties(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamParties(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamParties(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamClient_GetISteamRemotePlay(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamClient_GetISteamRemotePlay(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			} else {
				return NativeMethodsUnderlying.ISteamClient_GetISteamRemotePlay(instancePtr, hSteamUser, hSteamPipe, pchVersion);
			}
		}

		public static IntPtr ISteamFriends_GetPersonaName(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetPersonaName(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetPersonaName(instancePtr);
			}
		}

		public static ulong ISteamFriends_SetPersonaName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchPersonaName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_SetPersonaName(instancePtr, pchPersonaName);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_SetPersonaName(instancePtr, pchPersonaName);
			}
		}

		public static EPersonaState ISteamFriends_GetPersonaState(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetPersonaState(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetPersonaState(instancePtr);
			}
		}

		public static int ISteamFriends_GetFriendCount(IntPtr instancePtr, EFriendFlags iFriendFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendCount(instancePtr, iFriendFlags);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendCount(instancePtr, iFriendFlags);
			}
		}

		public static ulong ISteamFriends_GetFriendByIndex(IntPtr instancePtr, int iFriend, EFriendFlags iFriendFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendByIndex(instancePtr, iFriend, iFriendFlags);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendByIndex(instancePtr, iFriend, iFriendFlags);
			}
		}

		public static EFriendRelationship ISteamFriends_GetFriendRelationship(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendRelationship(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendRelationship(instancePtr, steamIDFriend);
			}
		}

		public static EPersonaState ISteamFriends_GetFriendPersonaState(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendPersonaState(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendPersonaState(instancePtr, steamIDFriend);
			}
		}

		public static IntPtr ISteamFriends_GetFriendPersonaName(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendPersonaName(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendPersonaName(instancePtr, steamIDFriend);
			}
		}

		public static bool ISteamFriends_GetFriendGamePlayed(IntPtr instancePtr, CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendGamePlayed(instancePtr, steamIDFriend, out pFriendGameInfo);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendGamePlayed(instancePtr, steamIDFriend, out pFriendGameInfo);
			}
		}

		public static IntPtr ISteamFriends_GetFriendPersonaNameHistory(IntPtr instancePtr, CSteamID steamIDFriend, int iPersonaName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendPersonaNameHistory(instancePtr, steamIDFriend, iPersonaName);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendPersonaNameHistory(instancePtr, steamIDFriend, iPersonaName);
			}
		}

		public static int ISteamFriends_GetFriendSteamLevel(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendSteamLevel(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendSteamLevel(instancePtr, steamIDFriend);
			}
		}

		public static IntPtr ISteamFriends_GetPlayerNickname(IntPtr instancePtr, CSteamID steamIDPlayer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetPlayerNickname(instancePtr, steamIDPlayer);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetPlayerNickname(instancePtr, steamIDPlayer);
			}
		}

		public static int ISteamFriends_GetFriendsGroupCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendsGroupCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendsGroupCount(instancePtr);
			}
		}

		public static short ISteamFriends_GetFriendsGroupIDByIndex(IntPtr instancePtr, int iFG) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendsGroupIDByIndex(instancePtr, iFG);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendsGroupIDByIndex(instancePtr, iFG);
			}
		}

		public static IntPtr ISteamFriends_GetFriendsGroupName(IntPtr instancePtr, FriendsGroupID_t friendsGroupID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendsGroupName(instancePtr, friendsGroupID);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendsGroupName(instancePtr, friendsGroupID);
			}
		}

		public static int ISteamFriends_GetFriendsGroupMembersCount(IntPtr instancePtr, FriendsGroupID_t friendsGroupID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendsGroupMembersCount(instancePtr, friendsGroupID);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendsGroupMembersCount(instancePtr, friendsGroupID);
			}
		}

		public static void ISteamFriends_GetFriendsGroupMembersList(IntPtr instancePtr, FriendsGroupID_t friendsGroupID, [In, Out] CSteamID[] pOutSteamIDMembers, int nMembersCount) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendsGroupMembersList(instancePtr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			} else {
				NativeMethodsUnderlying.ISteamFriends_GetFriendsGroupMembersList(instancePtr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}
		}

		public static bool ISteamFriends_HasFriend(IntPtr instancePtr, CSteamID steamIDFriend, EFriendFlags iFriendFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_HasFriend(instancePtr, steamIDFriend, iFriendFlags);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_HasFriend(instancePtr, steamIDFriend, iFriendFlags);
			}
		}

		public static int ISteamFriends_GetClanCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanCount(instancePtr);
			}
		}

		public static ulong ISteamFriends_GetClanByIndex(IntPtr instancePtr, int iClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanByIndex(instancePtr, iClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanByIndex(instancePtr, iClan);
			}
		}

		public static IntPtr ISteamFriends_GetClanName(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanName(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanName(instancePtr, steamIDClan);
			}
		}

		public static IntPtr ISteamFriends_GetClanTag(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanTag(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanTag(instancePtr, steamIDClan);
			}
		}

		public static bool ISteamFriends_GetClanActivityCounts(IntPtr instancePtr, CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanActivityCounts(instancePtr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanActivityCounts(instancePtr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}
		}

		public static ulong ISteamFriends_DownloadClanActivityCounts(IntPtr instancePtr, [In, Out] CSteamID[] psteamIDClans, int cClansToRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_DownloadClanActivityCounts(instancePtr, psteamIDClans, cClansToRequest);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_DownloadClanActivityCounts(instancePtr, psteamIDClans, cClansToRequest);
			}
		}

		public static int ISteamFriends_GetFriendCountFromSource(IntPtr instancePtr, CSteamID steamIDSource) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendCountFromSource(instancePtr, steamIDSource);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendCountFromSource(instancePtr, steamIDSource);
			}
		}

		public static ulong ISteamFriends_GetFriendFromSourceByIndex(IntPtr instancePtr, CSteamID steamIDSource, int iFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendFromSourceByIndex(instancePtr, steamIDSource, iFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendFromSourceByIndex(instancePtr, steamIDSource, iFriend);
			}
		}

		public static bool ISteamFriends_IsUserInSource(IntPtr instancePtr, CSteamID steamIDUser, CSteamID steamIDSource) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsUserInSource(instancePtr, steamIDUser, steamIDSource);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsUserInSource(instancePtr, steamIDUser, steamIDSource);
			}
		}

		public static void ISteamFriends_SetInGameVoiceSpeaking(IntPtr instancePtr, CSteamID steamIDUser, [MarshalAs(UnmanagedType.I1)] bool bSpeaking) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_SetInGameVoiceSpeaking(instancePtr, steamIDUser, bSpeaking);
			} else {
				NativeMethodsUnderlying.ISteamFriends_SetInGameVoiceSpeaking(instancePtr, steamIDUser, bSpeaking);
			}
		}

		public static void ISteamFriends_ActivateGameOverlay(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDialog) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlay(instancePtr, pchDialog);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlay(instancePtr, pchDialog);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayToUser(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayToUser(instancePtr, pchDialog, steamID);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayToUser(instancePtr, pchDialog, steamID);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayToWebPage(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchURL, EActivateGameOverlayToWebPageMode eMode) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayToWebPage(instancePtr, pchURL, eMode);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayToWebPage(instancePtr, pchURL, eMode);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayToStore(IntPtr instancePtr, AppId_t nAppID, EOverlayToStoreFlag eFlag) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayToStore(instancePtr, nAppID, eFlag);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayToStore(instancePtr, nAppID, eFlag);
			}
		}

		public static void ISteamFriends_SetPlayedWith(IntPtr instancePtr, CSteamID steamIDUserPlayedWith) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_SetPlayedWith(instancePtr, steamIDUserPlayedWith);
			} else {
				NativeMethodsUnderlying.ISteamFriends_SetPlayedWith(instancePtr, steamIDUserPlayedWith);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayInviteDialog(instancePtr, steamIDLobby);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayInviteDialog(instancePtr, steamIDLobby);
			}
		}

		public static int ISteamFriends_GetSmallFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetSmallFriendAvatar(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetSmallFriendAvatar(instancePtr, steamIDFriend);
			}
		}

		public static int ISteamFriends_GetMediumFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetMediumFriendAvatar(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetMediumFriendAvatar(instancePtr, steamIDFriend);
			}
		}

		public static int ISteamFriends_GetLargeFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetLargeFriendAvatar(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetLargeFriendAvatar(instancePtr, steamIDFriend);
			}
		}

		public static bool ISteamFriends_RequestUserInformation(IntPtr instancePtr, CSteamID steamIDUser, [MarshalAs(UnmanagedType.I1)] bool bRequireNameOnly) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_RequestUserInformation(instancePtr, steamIDUser, bRequireNameOnly);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_RequestUserInformation(instancePtr, steamIDUser, bRequireNameOnly);
			}
		}

		public static ulong ISteamFriends_RequestClanOfficerList(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_RequestClanOfficerList(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_RequestClanOfficerList(instancePtr, steamIDClan);
			}
		}

		public static ulong ISteamFriends_GetClanOwner(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanOwner(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanOwner(instancePtr, steamIDClan);
			}
		}

		public static int ISteamFriends_GetClanOfficerCount(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanOfficerCount(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanOfficerCount(instancePtr, steamIDClan);
			}
		}

		public static ulong ISteamFriends_GetClanOfficerByIndex(IntPtr instancePtr, CSteamID steamIDClan, int iOfficer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanOfficerByIndex(instancePtr, steamIDClan, iOfficer);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanOfficerByIndex(instancePtr, steamIDClan, iOfficer);
			}
		}

		public static uint ISteamFriends_GetUserRestrictions(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetUserRestrictions(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetUserRestrictions(instancePtr);
			}
		}

		public static bool ISteamFriends_SetRichPresence(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_SetRichPresence(instancePtr, pchKey, pchValue);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_SetRichPresence(instancePtr, pchKey, pchValue);
			}
		}

		public static void ISteamFriends_ClearRichPresence(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ClearRichPresence(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ClearRichPresence(instancePtr);
			}
		}

		public static IntPtr ISteamFriends_GetFriendRichPresence(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendRichPresence(instancePtr, steamIDFriend, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendRichPresence(instancePtr, steamIDFriend, pchKey);
			}
		}

		public static int ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendRichPresenceKeyCount(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendRichPresenceKeyCount(instancePtr, steamIDFriend);
			}
		}

		public static IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr instancePtr, CSteamID steamIDFriend, int iKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendRichPresenceKeyByIndex(instancePtr, steamIDFriend, iKey);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendRichPresenceKeyByIndex(instancePtr, steamIDFriend, iKey);
			}
		}

		public static void ISteamFriends_RequestFriendRichPresence(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_RequestFriendRichPresence(instancePtr, steamIDFriend);
			} else {
				NativeMethodsUnderlying.ISteamFriends_RequestFriendRichPresence(instancePtr, steamIDFriend);
			}
		}

		public static bool ISteamFriends_InviteUserToGame(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_InviteUserToGame(instancePtr, steamIDFriend, pchConnectString);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_InviteUserToGame(instancePtr, steamIDFriend, pchConnectString);
			}
		}

		public static int ISteamFriends_GetCoplayFriendCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetCoplayFriendCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetCoplayFriendCount(instancePtr);
			}
		}

		public static ulong ISteamFriends_GetCoplayFriend(IntPtr instancePtr, int iCoplayFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetCoplayFriend(instancePtr, iCoplayFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetCoplayFriend(instancePtr, iCoplayFriend);
			}
		}

		public static int ISteamFriends_GetFriendCoplayTime(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendCoplayTime(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendCoplayTime(instancePtr, steamIDFriend);
			}
		}

		public static uint ISteamFriends_GetFriendCoplayGame(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendCoplayGame(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendCoplayGame(instancePtr, steamIDFriend);
			}
		}

		public static ulong ISteamFriends_JoinClanChatRoom(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_JoinClanChatRoom(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_JoinClanChatRoom(instancePtr, steamIDClan);
			}
		}

		public static bool ISteamFriends_LeaveClanChatRoom(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_LeaveClanChatRoom(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_LeaveClanChatRoom(instancePtr, steamIDClan);
			}
		}

		public static int ISteamFriends_GetClanChatMemberCount(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanChatMemberCount(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanChatMemberCount(instancePtr, steamIDClan);
			}
		}

		public static ulong ISteamFriends_GetChatMemberByIndex(IntPtr instancePtr, CSteamID steamIDClan, int iUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetChatMemberByIndex(instancePtr, steamIDClan, iUser);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetChatMemberByIndex(instancePtr, steamIDClan, iUser);
			}
		}

		public static bool ISteamFriends_SendClanChatMessage(IntPtr instancePtr, CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_SendClanChatMessage(instancePtr, steamIDClanChat, pchText);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_SendClanChatMessage(instancePtr, steamIDClanChat, pchText);
			}
		}

		public static int ISteamFriends_GetClanChatMessage(IntPtr instancePtr, CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetClanChatMessage(instancePtr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetClanChatMessage(instancePtr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}
		}

		public static bool ISteamFriends_IsClanChatAdmin(IntPtr instancePtr, CSteamID steamIDClanChat, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsClanChatAdmin(instancePtr, steamIDClanChat, steamIDUser);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsClanChatAdmin(instancePtr, steamIDClanChat, steamIDUser);
			}
		}

		public static bool ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr instancePtr, CSteamID steamIDClanChat) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsClanChatWindowOpenInSteam(instancePtr, steamIDClanChat);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsClanChatWindowOpenInSteam(instancePtr, steamIDClanChat);
			}
		}

		public static bool ISteamFriends_OpenClanChatWindowInSteam(IntPtr instancePtr, CSteamID steamIDClanChat) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_OpenClanChatWindowInSteam(instancePtr, steamIDClanChat);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_OpenClanChatWindowInSteam(instancePtr, steamIDClanChat);
			}
		}

		public static bool ISteamFriends_CloseClanChatWindowInSteam(IntPtr instancePtr, CSteamID steamIDClanChat) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_CloseClanChatWindowInSteam(instancePtr, steamIDClanChat);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_CloseClanChatWindowInSteam(instancePtr, steamIDClanChat);
			}
		}

		public static bool ISteamFriends_SetListenForFriendsMessages(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bInterceptEnabled) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_SetListenForFriendsMessages(instancePtr, bInterceptEnabled);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_SetListenForFriendsMessages(instancePtr, bInterceptEnabled);
			}
		}

		public static bool ISteamFriends_ReplyToFriendMessage(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_ReplyToFriendMessage(instancePtr, steamIDFriend, pchMsgToSend);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_ReplyToFriendMessage(instancePtr, steamIDFriend, pchMsgToSend);
			}
		}

		public static int ISteamFriends_GetFriendMessage(IntPtr instancePtr, CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFriendMessage(instancePtr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFriendMessage(instancePtr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}
		}

		public static ulong ISteamFriends_GetFollowerCount(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetFollowerCount(instancePtr, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetFollowerCount(instancePtr, steamID);
			}
		}

		public static ulong ISteamFriends_IsFollowing(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsFollowing(instancePtr, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsFollowing(instancePtr, steamID);
			}
		}

		public static ulong ISteamFriends_EnumerateFollowingList(IntPtr instancePtr, uint unStartIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_EnumerateFollowingList(instancePtr, unStartIndex);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_EnumerateFollowingList(instancePtr, unStartIndex);
			}
		}

		public static bool ISteamFriends_IsClanPublic(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsClanPublic(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsClanPublic(instancePtr, steamIDClan);
			}
		}

		public static bool ISteamFriends_IsClanOfficialGameGroup(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_IsClanOfficialGameGroup(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_IsClanOfficialGameGroup(instancePtr, steamIDClan);
			}
		}

		public static int ISteamFriends_GetNumChatsWithUnreadPriorityMessages(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetNumChatsWithUnreadPriorityMessages(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetNumChatsWithUnreadPriorityMessages(instancePtr);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(instancePtr, steamIDLobby);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(instancePtr, steamIDLobby);
			}
		}

		public static bool ISteamFriends_RegisterProtocolInOverlayBrowser(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchProtocol) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_RegisterProtocolInOverlayBrowser(instancePtr, pchProtocol);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_RegisterProtocolInOverlayBrowser(instancePtr, pchProtocol);
			}
		}

		public static void ISteamFriends_ActivateGameOverlayInviteDialogConnectString(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchConnectString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamFriends_ActivateGameOverlayInviteDialogConnectString(instancePtr, pchConnectString);
			} else {
				NativeMethodsUnderlying.ISteamFriends_ActivateGameOverlayInviteDialogConnectString(instancePtr, pchConnectString);
			}
		}

		public static ulong ISteamFriends_RequestEquippedProfileItems(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_RequestEquippedProfileItems(instancePtr, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_RequestEquippedProfileItems(instancePtr, steamID);
			}
		}

		public static bool ISteamFriends_BHasEquippedProfileItem(IntPtr instancePtr, CSteamID steamID, ECommunityProfileItemType itemType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_BHasEquippedProfileItem(instancePtr, steamID, itemType);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_BHasEquippedProfileItem(instancePtr, steamID, itemType);
			}
		}

		public static IntPtr ISteamFriends_GetProfileItemPropertyString(IntPtr instancePtr, CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetProfileItemPropertyString(instancePtr, steamID, itemType, prop);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetProfileItemPropertyString(instancePtr, steamID, itemType, prop);
			}
		}

		public static uint ISteamFriends_GetProfileItemPropertyUint(IntPtr instancePtr, CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamFriends_GetProfileItemPropertyUint(instancePtr, steamID, itemType, prop);
			} else {
				return NativeMethodsUnderlying.ISteamFriends_GetProfileItemPropertyUint(instancePtr, steamID, itemType, prop);
			}
		}

		public static void ISteamGameServer_SetProduct(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszProduct) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetProduct(instancePtr, pszProduct);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetProduct(instancePtr, pszProduct);
			}
		}

		public static void ISteamGameServer_SetGameDescription(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszGameDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetGameDescription(instancePtr, pszGameDescription);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetGameDescription(instancePtr, pszGameDescription);
			}
		}

		public static void ISteamGameServer_SetModDir(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszModDir) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetModDir(instancePtr, pszModDir);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetModDir(instancePtr, pszModDir);
			}
		}

		public static void ISteamGameServer_SetDedicatedServer(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bDedicated) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetDedicatedServer(instancePtr, bDedicated);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetDedicatedServer(instancePtr, bDedicated);
			}
		}

		public static void ISteamGameServer_LogOn(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszToken) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_LogOn(instancePtr, pszToken);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_LogOn(instancePtr, pszToken);
			}
		}

		public static void ISteamGameServer_LogOnAnonymous(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_LogOnAnonymous(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_LogOnAnonymous(instancePtr);
			}
		}

		public static void ISteamGameServer_LogOff(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_LogOff(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_LogOff(instancePtr);
			}
		}

		public static bool ISteamGameServer_BLoggedOn(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_BLoggedOn(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_BLoggedOn(instancePtr);
			}
		}

		public static bool ISteamGameServer_BSecure(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_BSecure(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_BSecure(instancePtr);
			}
		}

		public static ulong ISteamGameServer_GetSteamID(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_GetSteamID(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_GetSteamID(instancePtr);
			}
		}

		public static bool ISteamGameServer_WasRestartRequested(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_WasRestartRequested(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_WasRestartRequested(instancePtr);
			}
		}

		public static void ISteamGameServer_SetMaxPlayerCount(IntPtr instancePtr, int cPlayersMax) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetMaxPlayerCount(instancePtr, cPlayersMax);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetMaxPlayerCount(instancePtr, cPlayersMax);
			}
		}

		public static void ISteamGameServer_SetBotPlayerCount(IntPtr instancePtr, int cBotplayers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetBotPlayerCount(instancePtr, cBotplayers);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetBotPlayerCount(instancePtr, cBotplayers);
			}
		}

		public static void ISteamGameServer_SetServerName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszServerName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetServerName(instancePtr, pszServerName);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetServerName(instancePtr, pszServerName);
			}
		}

		public static void ISteamGameServer_SetMapName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszMapName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetMapName(instancePtr, pszMapName);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetMapName(instancePtr, pszMapName);
			}
		}

		public static void ISteamGameServer_SetPasswordProtected(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bPasswordProtected) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetPasswordProtected(instancePtr, bPasswordProtected);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetPasswordProtected(instancePtr, bPasswordProtected);
			}
		}

		public static void ISteamGameServer_SetSpectatorPort(IntPtr instancePtr, ushort unSpectatorPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetSpectatorPort(instancePtr, unSpectatorPort);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetSpectatorPort(instancePtr, unSpectatorPort);
			}
		}

		public static void ISteamGameServer_SetSpectatorServerName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszSpectatorServerName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetSpectatorServerName(instancePtr, pszSpectatorServerName);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetSpectatorServerName(instancePtr, pszSpectatorServerName);
			}
		}

		public static void ISteamGameServer_ClearAllKeyValues(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_ClearAllKeyValues(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_ClearAllKeyValues(instancePtr);
			}
		}

		public static void ISteamGameServer_SetKeyValue(IntPtr instancePtr, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetKeyValue(instancePtr, pKey, pValue);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetKeyValue(instancePtr, pKey, pValue);
			}
		}

		public static void ISteamGameServer_SetGameTags(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchGameTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetGameTags(instancePtr, pchGameTags);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetGameTags(instancePtr, pchGameTags);
			}
		}

		public static void ISteamGameServer_SetGameData(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchGameData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetGameData(instancePtr, pchGameData);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetGameData(instancePtr, pchGameData);
			}
		}

		public static void ISteamGameServer_SetRegion(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszRegion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetRegion(instancePtr, pszRegion);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetRegion(instancePtr, pszRegion);
			}
		}

		public static void ISteamGameServer_SetAdvertiseServerActive(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bActive) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SetAdvertiseServerActive(instancePtr, bActive);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SetAdvertiseServerActive(instancePtr, bActive);
			}
		}

		public static uint ISteamGameServer_GetAuthSessionTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket, ref SteamNetworkingIdentity pSnid) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_GetAuthSessionTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket, ref pSnid);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_GetAuthSessionTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket, ref pSnid);
			}
		}

		public static EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr instancePtr, byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_BeginAuthSession(instancePtr, pAuthTicket, cbAuthTicket, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_BeginAuthSession(instancePtr, pAuthTicket, cbAuthTicket, steamID);
			}
		}

		public static void ISteamGameServer_EndAuthSession(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_EndAuthSession(instancePtr, steamID);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_EndAuthSession(instancePtr, steamID);
			}
		}

		public static void ISteamGameServer_CancelAuthTicket(IntPtr instancePtr, HAuthTicket hAuthTicket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_CancelAuthTicket(instancePtr, hAuthTicket);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_CancelAuthTicket(instancePtr, hAuthTicket);
			}
		}

		public static EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(IntPtr instancePtr, CSteamID steamID, AppId_t appID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_UserHasLicenseForApp(instancePtr, steamID, appID);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_UserHasLicenseForApp(instancePtr, steamID, appID);
			}
		}

		public static bool ISteamGameServer_RequestUserGroupStatus(IntPtr instancePtr, CSteamID steamIDUser, CSteamID steamIDGroup) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_RequestUserGroupStatus(instancePtr, steamIDUser, steamIDGroup);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_RequestUserGroupStatus(instancePtr, steamIDUser, steamIDGroup);
			}
		}

		public static void ISteamGameServer_GetGameplayStats(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_GetGameplayStats(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_GetGameplayStats(instancePtr);
			}
		}

		public static ulong ISteamGameServer_GetServerReputation(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_GetServerReputation(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_GetServerReputation(instancePtr);
			}
		}

		public static SteamIPAddress_t ISteamGameServer_GetPublicIP(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_GetPublicIP(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_GetPublicIP(instancePtr);
			}
		}

		public static bool ISteamGameServer_HandleIncomingPacket(IntPtr instancePtr, byte[] pData, int cbData, uint srcIP, ushort srcPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_HandleIncomingPacket(instancePtr, pData, cbData, srcIP, srcPort);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_HandleIncomingPacket(instancePtr, pData, cbData, srcIP, srcPort);
			}
		}

		public static int ISteamGameServer_GetNextOutgoingPacket(IntPtr instancePtr, byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_GetNextOutgoingPacket(instancePtr, pOut, cbMaxOut, out pNetAdr, out pPort);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_GetNextOutgoingPacket(instancePtr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}
		}

		public static ulong ISteamGameServer_AssociateWithClan(IntPtr instancePtr, CSteamID steamIDClan) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_AssociateWithClan(instancePtr, steamIDClan);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_AssociateWithClan(instancePtr, steamIDClan);
			}
		}

		public static ulong ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr instancePtr, CSteamID steamIDNewPlayer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_ComputeNewPlayerCompatibility(instancePtr, steamIDNewPlayer);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_ComputeNewPlayerCompatibility(instancePtr, steamIDNewPlayer);
			}
		}

		public static bool ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(IntPtr instancePtr, uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(instancePtr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(instancePtr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}
		}

		public static ulong ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_CreateUnauthenticatedUserConnection(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_CreateUnauthenticatedUserConnection(instancePtr);
			}
		}

		public static void ISteamGameServer_SendUserDisconnect_DEPRECATED(IntPtr instancePtr, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamGameServer_SendUserDisconnect_DEPRECATED(instancePtr, steamIDUser);
			} else {
				NativeMethodsUnderlying.ISteamGameServer_SendUserDisconnect_DEPRECATED(instancePtr, steamIDUser);
			}
		}

		public static bool ISteamGameServer_BUpdateUserData(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServer_BUpdateUserData(instancePtr, steamIDUser, pchPlayerName, uScore);
			} else {
				return NativeMethodsUnderlying.ISteamGameServer_BUpdateUserData(instancePtr, steamIDUser, pchPlayerName, uScore);
			}
		}

		public static ulong ISteamGameServerStats_RequestUserStats(IntPtr instancePtr, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_RequestUserStats(instancePtr, steamIDUser);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_RequestUserStats(instancePtr, steamIDUser);
			}
		}

		public static bool ISteamGameServerStats_GetUserStatInt32(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_GetUserStatInt32(instancePtr, steamIDUser, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_GetUserStatInt32(instancePtr, steamIDUser, pchName, out pData);
			}
		}

		public static bool ISteamGameServerStats_GetUserStatFloat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_GetUserStatFloat(instancePtr, steamIDUser, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_GetUserStatFloat(instancePtr, steamIDUser, pchName, out pData);
			}
		}

		public static bool ISteamGameServerStats_GetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_GetUserAchievement(instancePtr, steamIDUser, pchName, out pbAchieved);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_GetUserAchievement(instancePtr, steamIDUser, pchName, out pbAchieved);
			}
		}

		public static bool ISteamGameServerStats_SetUserStatInt32(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_SetUserStatInt32(instancePtr, steamIDUser, pchName, nData);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_SetUserStatInt32(instancePtr, steamIDUser, pchName, nData);
			}
		}

		public static bool ISteamGameServerStats_SetUserStatFloat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_SetUserStatFloat(instancePtr, steamIDUser, pchName, fData);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_SetUserStatFloat(instancePtr, steamIDUser, pchName, fData);
			}
		}

		public static bool ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_UpdateUserAvgRateStat(instancePtr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_UpdateUserAvgRateStat(instancePtr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}
		}

		public static bool ISteamGameServerStats_SetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_SetUserAchievement(instancePtr, steamIDUser, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_SetUserAchievement(instancePtr, steamIDUser, pchName);
			}
		}

		public static bool ISteamGameServerStats_ClearUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_ClearUserAchievement(instancePtr, steamIDUser, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_ClearUserAchievement(instancePtr, steamIDUser, pchName);
			}
		}

		public static ulong ISteamGameServerStats_StoreUserStats(IntPtr instancePtr, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameServerStats_StoreUserStats(instancePtr, steamIDUser);
			} else {
				return NativeMethodsUnderlying.ISteamGameServerStats_StoreUserStats(instancePtr, steamIDUser);
			}
		}

		public static bool ISteamHTMLSurface_Init(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTMLSurface_Init(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamHTMLSurface_Init(instancePtr);
			}
		}

		public static bool ISteamHTMLSurface_Shutdown(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTMLSurface_Shutdown(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamHTMLSurface_Shutdown(instancePtr);
			}
		}

		public static ulong ISteamHTMLSurface_CreateBrowser(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTMLSurface_CreateBrowser(instancePtr, pchUserAgent, pchUserCSS);
			} else {
				return NativeMethodsUnderlying.ISteamHTMLSurface_CreateBrowser(instancePtr, pchUserAgent, pchUserCSS);
			}
		}

		public static void ISteamHTMLSurface_RemoveBrowser(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_RemoveBrowser(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_RemoveBrowser(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_LoadURL(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_LoadURL(instancePtr, unBrowserHandle, pchURL, pchPostData);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_LoadURL(instancePtr, unBrowserHandle, pchURL, pchPostData);
			}
		}

		public static void ISteamHTMLSurface_SetSize(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetSize(instancePtr, unBrowserHandle, unWidth, unHeight);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetSize(instancePtr, unBrowserHandle, unWidth, unHeight);
			}
		}

		public static void ISteamHTMLSurface_StopLoad(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_StopLoad(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_StopLoad(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_Reload(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_Reload(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_Reload(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_GoBack(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_GoBack(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_GoBack(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_GoForward(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_GoForward(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_GoForward(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_AddHeader(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_AddHeader(instancePtr, unBrowserHandle, pchKey, pchValue);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_AddHeader(instancePtr, unBrowserHandle, pchKey, pchValue);
			}
		}

		public static void ISteamHTMLSurface_ExecuteJavascript(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_ExecuteJavascript(instancePtr, unBrowserHandle, pchScript);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_ExecuteJavascript(instancePtr, unBrowserHandle, pchScript);
			}
		}

		public static void ISteamHTMLSurface_MouseUp(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_MouseUp(instancePtr, unBrowserHandle, eMouseButton);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_MouseUp(instancePtr, unBrowserHandle, eMouseButton);
			}
		}

		public static void ISteamHTMLSurface_MouseDown(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_MouseDown(instancePtr, unBrowserHandle, eMouseButton);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_MouseDown(instancePtr, unBrowserHandle, eMouseButton);
			}
		}

		public static void ISteamHTMLSurface_MouseDoubleClick(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_MouseDoubleClick(instancePtr, unBrowserHandle, eMouseButton);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_MouseDoubleClick(instancePtr, unBrowserHandle, eMouseButton);
			}
		}

		public static void ISteamHTMLSurface_MouseMove(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int x, int y) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_MouseMove(instancePtr, unBrowserHandle, x, y);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_MouseMove(instancePtr, unBrowserHandle, x, y);
			}
		}

		public static void ISteamHTMLSurface_MouseWheel(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int nDelta) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_MouseWheel(instancePtr, unBrowserHandle, nDelta);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_MouseWheel(instancePtr, unBrowserHandle, nDelta);
			}
		}

		public static void ISteamHTMLSurface_KeyDown(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, [MarshalAs(UnmanagedType.I1)] bool bIsSystemKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_KeyDown(instancePtr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_KeyDown(instancePtr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
			}
		}

		public static void ISteamHTMLSurface_KeyUp(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_KeyUp(instancePtr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_KeyUp(instancePtr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}
		}

		public static void ISteamHTMLSurface_KeyChar(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_KeyChar(instancePtr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_KeyChar(instancePtr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}
		}

		public static void ISteamHTMLSurface_SetHorizontalScroll(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetHorizontalScroll(instancePtr, unBrowserHandle, nAbsolutePixelScroll);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetHorizontalScroll(instancePtr, unBrowserHandle, nAbsolutePixelScroll);
			}
		}

		public static void ISteamHTMLSurface_SetVerticalScroll(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetVerticalScroll(instancePtr, unBrowserHandle, nAbsolutePixelScroll);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetVerticalScroll(instancePtr, unBrowserHandle, nAbsolutePixelScroll);
			}
		}

		public static void ISteamHTMLSurface_SetKeyFocus(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, [MarshalAs(UnmanagedType.I1)] bool bHasKeyFocus) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetKeyFocus(instancePtr, unBrowserHandle, bHasKeyFocus);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetKeyFocus(instancePtr, unBrowserHandle, bHasKeyFocus);
			}
		}

		public static void ISteamHTMLSurface_ViewSource(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_ViewSource(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_ViewSource(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_CopyToClipboard(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_CopyToClipboard(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_CopyToClipboard(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_PasteFromClipboard(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_PasteFromClipboard(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_PasteFromClipboard(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_Find(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, [MarshalAs(UnmanagedType.I1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.I1)] bool bReverse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_Find(instancePtr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_Find(instancePtr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}
		}

		public static void ISteamHTMLSurface_StopFind(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_StopFind(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_StopFind(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_GetLinkAtPosition(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int x, int y) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_GetLinkAtPosition(instancePtr, unBrowserHandle, x, y);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_GetLinkAtPosition(instancePtr, unBrowserHandle, x, y);
			}
		}

		public static void ISteamHTMLSurface_SetCookie(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, [MarshalAs(UnmanagedType.I1)] bool bSecure, [MarshalAs(UnmanagedType.I1)] bool bHTTPOnly) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetCookie(instancePtr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetCookie(instancePtr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}
		}

		public static void ISteamHTMLSurface_SetPageScaleFactor(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetPageScaleFactor(instancePtr, unBrowserHandle, flZoom, nPointX, nPointY);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetPageScaleFactor(instancePtr, unBrowserHandle, flZoom, nPointX, nPointY);
			}
		}

		public static void ISteamHTMLSurface_SetBackgroundMode(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, [MarshalAs(UnmanagedType.I1)] bool bBackgroundMode) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetBackgroundMode(instancePtr, unBrowserHandle, bBackgroundMode);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetBackgroundMode(instancePtr, unBrowserHandle, bBackgroundMode);
			}
		}

		public static void ISteamHTMLSurface_SetDPIScalingFactor(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, float flDPIScaling) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_SetDPIScalingFactor(instancePtr, unBrowserHandle, flDPIScaling);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_SetDPIScalingFactor(instancePtr, unBrowserHandle, flDPIScaling);
			}
		}

		public static void ISteamHTMLSurface_OpenDeveloperTools(IntPtr instancePtr, HHTMLBrowser unBrowserHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_OpenDeveloperTools(instancePtr, unBrowserHandle);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_OpenDeveloperTools(instancePtr, unBrowserHandle);
			}
		}

		public static void ISteamHTMLSurface_AllowStartRequest(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, [MarshalAs(UnmanagedType.I1)] bool bAllowed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_AllowStartRequest(instancePtr, unBrowserHandle, bAllowed);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_AllowStartRequest(instancePtr, unBrowserHandle, bAllowed);
			}
		}

		public static void ISteamHTMLSurface_JSDialogResponse(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, [MarshalAs(UnmanagedType.I1)] bool bResult) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_JSDialogResponse(instancePtr, unBrowserHandle, bResult);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_JSDialogResponse(instancePtr, unBrowserHandle, bResult);
			}
		}

		public static void ISteamHTMLSurface_FileLoadDialogResponse(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamHTMLSurface_FileLoadDialogResponse(instancePtr, unBrowserHandle, pchSelectedFiles);
			} else {
				NativeMethodsUnderlying.ISteamHTMLSurface_FileLoadDialogResponse(instancePtr, unBrowserHandle, pchSelectedFiles);
			}
		}

		public static uint ISteamHTTP_CreateHTTPRequest(IntPtr instancePtr, EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_CreateHTTPRequest(instancePtr, eHTTPRequestMethod, pchAbsoluteURL);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_CreateHTTPRequest(instancePtr, eHTTPRequestMethod, pchAbsoluteURL);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestContextValue(IntPtr instancePtr, HTTPRequestHandle hRequest, ulong ulContextValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestContextValue(instancePtr, hRequest, ulContextValue);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestContextValue(instancePtr, hRequest, ulContextValue);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr instancePtr, HTTPRequestHandle hRequest, uint unTimeoutSeconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(instancePtr, hRequest, unTimeoutSeconds);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(instancePtr, hRequest, unTimeoutSeconds);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestHeaderValue(instancePtr, hRequest, pchHeaderName, pchHeaderValue);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestHeaderValue(instancePtr, hRequest, pchHeaderName, pchHeaderValue);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestGetOrPostParameter(instancePtr, hRequest, pchParamName, pchParamValue);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestGetOrPostParameter(instancePtr, hRequest, pchParamName, pchParamValue);
			}
		}

		public static bool ISteamHTTP_SendHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SendHTTPRequest(instancePtr, hRequest, out pCallHandle);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SendHTTPRequest(instancePtr, hRequest, out pCallHandle);
			}
		}

		public static bool ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr instancePtr, HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SendHTTPRequestAndStreamResponse(instancePtr, hRequest, out pCallHandle);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SendHTTPRequestAndStreamResponse(instancePtr, hRequest, out pCallHandle);
			}
		}

		public static bool ISteamHTTP_DeferHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_DeferHTTPRequest(instancePtr, hRequest);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_DeferHTTPRequest(instancePtr, hRequest);
			}
		}

		public static bool ISteamHTTP_PrioritizeHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_PrioritizeHTTPRequest(instancePtr, hRequest);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_PrioritizeHTTPRequest(instancePtr, hRequest);
			}
		}

		public static bool ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPResponseHeaderSize(instancePtr, hRequest, pchHeaderName, out unResponseHeaderSize);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPResponseHeaderSize(instancePtr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}
		}

		public static bool ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPResponseHeaderValue(instancePtr, hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPResponseHeaderValue(instancePtr, hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
			}
		}

		public static bool ISteamHTTP_GetHTTPResponseBodySize(IntPtr instancePtr, HTTPRequestHandle hRequest, out uint unBodySize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPResponseBodySize(instancePtr, hRequest, out unBodySize);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPResponseBodySize(instancePtr, hRequest, out unBodySize);
			}
		}

		public static bool ISteamHTTP_GetHTTPResponseBodyData(IntPtr instancePtr, HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPResponseBodyData(instancePtr, hRequest, pBodyDataBuffer, unBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPResponseBodyData(instancePtr, hRequest, pBodyDataBuffer, unBufferSize);
			}
		}

		public static bool ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr instancePtr, HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPStreamingResponseBodyData(instancePtr, hRequest, cOffset, pBodyDataBuffer, unBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPStreamingResponseBodyData(instancePtr, hRequest, cOffset, pBodyDataBuffer, unBufferSize);
			}
		}

		public static bool ISteamHTTP_ReleaseHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_ReleaseHTTPRequest(instancePtr, hRequest);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_ReleaseHTTPRequest(instancePtr, hRequest);
			}
		}

		public static bool ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr instancePtr, HTTPRequestHandle hRequest, out float pflPercentOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPDownloadProgressPct(instancePtr, hRequest, out pflPercentOut);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPDownloadProgressPct(instancePtr, hRequest, out pflPercentOut);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestRawPostBody(instancePtr, hRequest, pchContentType, pubBody, unBodyLen);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestRawPostBody(instancePtr, hRequest, pchContentType, pubBody, unBodyLen);
			}
		}

		public static uint ISteamHTTP_CreateCookieContainer(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bAllowResponsesToModify) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_CreateCookieContainer(instancePtr, bAllowResponsesToModify);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_CreateCookieContainer(instancePtr, bAllowResponsesToModify);
			}
		}

		public static bool ISteamHTTP_ReleaseCookieContainer(IntPtr instancePtr, HTTPCookieContainerHandle hCookieContainer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_ReleaseCookieContainer(instancePtr, hCookieContainer);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_ReleaseCookieContainer(instancePtr, hCookieContainer);
			}
		}

		public static bool ISteamHTTP_SetCookie(IntPtr instancePtr, HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetCookie(instancePtr, hCookieContainer, pchHost, pchUrl, pchCookie);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetCookie(instancePtr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr instancePtr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestCookieContainer(instancePtr, hRequest, hCookieContainer);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestCookieContainer(instancePtr, hRequest, hCookieContainer);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestUserAgentInfo(instancePtr, hRequest, pchUserAgentInfo);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestUserAgentInfo(instancePtr, hRequest, pchUserAgentInfo);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr instancePtr, HTTPRequestHandle hRequest, [MarshalAs(UnmanagedType.I1)] bool bRequireVerifiedCertificate) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(instancePtr, hRequest, bRequireVerifiedCertificate);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(instancePtr, hRequest, bRequireVerifiedCertificate);
			}
		}

		public static bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr instancePtr, HTTPRequestHandle hRequest, uint unMilliseconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(instancePtr, hRequest, unMilliseconds);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(instancePtr, hRequest, unMilliseconds);
			}
		}

		public static bool ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr instancePtr, HTTPRequestHandle hRequest, out bool pbWasTimedOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamHTTP_GetHTTPRequestWasTimedOut(instancePtr, hRequest, out pbWasTimedOut);
			} else {
				return NativeMethodsUnderlying.ISteamHTTP_GetHTTPRequestWasTimedOut(instancePtr, hRequest, out pbWasTimedOut);
			}
		}

		public static bool ISteamInput_Init(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bExplicitlyCallRunFrame) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_Init(instancePtr, bExplicitlyCallRunFrame);
			} else {
				return NativeMethodsUnderlying.ISteamInput_Init(instancePtr, bExplicitlyCallRunFrame);
			}
		}

		public static bool ISteamInput_Shutdown(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_Shutdown(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInput_Shutdown(instancePtr);
			}
		}

		public static bool ISteamInput_SetInputActionManifestFilePath(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchInputActionManifestAbsolutePath) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_SetInputActionManifestFilePath(instancePtr, pchInputActionManifestAbsolutePath);
			} else {
				return NativeMethodsUnderlying.ISteamInput_SetInputActionManifestFilePath(instancePtr, pchInputActionManifestAbsolutePath);
			}
		}

		public static void ISteamInput_RunFrame(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bReservedValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_RunFrame(instancePtr, bReservedValue);
			} else {
				NativeMethodsUnderlying.ISteamInput_RunFrame(instancePtr, bReservedValue);
			}
		}

		public static bool ISteamInput_BWaitForData(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bWaitForever, uint unTimeout) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_BWaitForData(instancePtr, bWaitForever, unTimeout);
			} else {
				return NativeMethodsUnderlying.ISteamInput_BWaitForData(instancePtr, bWaitForever, unTimeout);
			}
		}

		public static bool ISteamInput_BNewDataAvailable(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_BNewDataAvailable(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInput_BNewDataAvailable(instancePtr);
			}
		}

		public static int ISteamInput_GetConnectedControllers(IntPtr instancePtr, [In, Out] InputHandle_t[] handlesOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetConnectedControllers(instancePtr, handlesOut);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetConnectedControllers(instancePtr, handlesOut);
			}
		}

		public static void ISteamInput_EnableDeviceCallbacks(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_EnableDeviceCallbacks(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamInput_EnableDeviceCallbacks(instancePtr);
			}
		}

		public static void ISteamInput_EnableActionEventCallbacks(IntPtr instancePtr, SteamInputActionEventCallbackPointer pCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_EnableActionEventCallbacks(instancePtr, pCallback);
			} else {
				NativeMethodsUnderlying.ISteamInput_EnableActionEventCallbacks(instancePtr, pCallback);
			}
		}

		public static ulong ISteamInput_GetActionSetHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionSetName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetActionSetHandle(instancePtr, pszActionSetName);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetActionSetHandle(instancePtr, pszActionSetName);
			}
		}

		public static void ISteamInput_ActivateActionSet(IntPtr instancePtr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_ActivateActionSet(instancePtr, inputHandle, actionSetHandle);
			} else {
				NativeMethodsUnderlying.ISteamInput_ActivateActionSet(instancePtr, inputHandle, actionSetHandle);
			}
		}

		public static ulong ISteamInput_GetCurrentActionSet(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetCurrentActionSet(instancePtr, inputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetCurrentActionSet(instancePtr, inputHandle);
			}
		}

		public static void ISteamInput_ActivateActionSetLayer(IntPtr instancePtr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_ActivateActionSetLayer(instancePtr, inputHandle, actionSetLayerHandle);
			} else {
				NativeMethodsUnderlying.ISteamInput_ActivateActionSetLayer(instancePtr, inputHandle, actionSetLayerHandle);
			}
		}

		public static void ISteamInput_DeactivateActionSetLayer(IntPtr instancePtr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_DeactivateActionSetLayer(instancePtr, inputHandle, actionSetLayerHandle);
			} else {
				NativeMethodsUnderlying.ISteamInput_DeactivateActionSetLayer(instancePtr, inputHandle, actionSetLayerHandle);
			}
		}

		public static void ISteamInput_DeactivateAllActionSetLayers(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_DeactivateAllActionSetLayers(instancePtr, inputHandle);
			} else {
				NativeMethodsUnderlying.ISteamInput_DeactivateAllActionSetLayers(instancePtr, inputHandle);
			}
		}

		public static int ISteamInput_GetActiveActionSetLayers(IntPtr instancePtr, InputHandle_t inputHandle, [In, Out] InputActionSetHandle_t[] handlesOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetActiveActionSetLayers(instancePtr, inputHandle, handlesOut);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetActiveActionSetLayers(instancePtr, inputHandle, handlesOut);
			}
		}

		public static ulong ISteamInput_GetDigitalActionHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetDigitalActionHandle(instancePtr, pszActionName);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetDigitalActionHandle(instancePtr, pszActionName);
			}
		}

		public static InputDigitalActionData_t ISteamInput_GetDigitalActionData(IntPtr instancePtr, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetDigitalActionData(instancePtr, inputHandle, digitalActionHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetDigitalActionData(instancePtr, inputHandle, digitalActionHandle);
			}
		}

		public static int ISteamInput_GetDigitalActionOrigins(IntPtr instancePtr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, [In, Out] EInputActionOrigin[] originsOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetDigitalActionOrigins(instancePtr, inputHandle, actionSetHandle, digitalActionHandle, originsOut);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetDigitalActionOrigins(instancePtr, inputHandle, actionSetHandle, digitalActionHandle, originsOut);
			}
		}

		public static IntPtr ISteamInput_GetStringForDigitalActionName(IntPtr instancePtr, InputDigitalActionHandle_t eActionHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetStringForDigitalActionName(instancePtr, eActionHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetStringForDigitalActionName(instancePtr, eActionHandle);
			}
		}

		public static ulong ISteamInput_GetAnalogActionHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetAnalogActionHandle(instancePtr, pszActionName);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetAnalogActionHandle(instancePtr, pszActionName);
			}
		}

		public static InputAnalogActionData_t ISteamInput_GetAnalogActionData(IntPtr instancePtr, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetAnalogActionData(instancePtr, inputHandle, analogActionHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetAnalogActionData(instancePtr, inputHandle, analogActionHandle);
			}
		}

		public static int ISteamInput_GetAnalogActionOrigins(IntPtr instancePtr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, [In, Out] EInputActionOrigin[] originsOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetAnalogActionOrigins(instancePtr, inputHandle, actionSetHandle, analogActionHandle, originsOut);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetAnalogActionOrigins(instancePtr, inputHandle, actionSetHandle, analogActionHandle, originsOut);
			}
		}

		public static IntPtr ISteamInput_GetGlyphPNGForActionOrigin(IntPtr instancePtr, EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint unFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetGlyphPNGForActionOrigin(instancePtr, eOrigin, eSize, unFlags);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetGlyphPNGForActionOrigin(instancePtr, eOrigin, eSize, unFlags);
			}
		}

		public static IntPtr ISteamInput_GetGlyphSVGForActionOrigin(IntPtr instancePtr, EInputActionOrigin eOrigin, uint unFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetGlyphSVGForActionOrigin(instancePtr, eOrigin, unFlags);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetGlyphSVGForActionOrigin(instancePtr, eOrigin, unFlags);
			}
		}

		public static IntPtr ISteamInput_GetGlyphForActionOrigin_Legacy(IntPtr instancePtr, EInputActionOrigin eOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetGlyphForActionOrigin_Legacy(instancePtr, eOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetGlyphForActionOrigin_Legacy(instancePtr, eOrigin);
			}
		}

		public static IntPtr ISteamInput_GetStringForActionOrigin(IntPtr instancePtr, EInputActionOrigin eOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetStringForActionOrigin(instancePtr, eOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetStringForActionOrigin(instancePtr, eOrigin);
			}
		}

		public static IntPtr ISteamInput_GetStringForAnalogActionName(IntPtr instancePtr, InputAnalogActionHandle_t eActionHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetStringForAnalogActionName(instancePtr, eActionHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetStringForAnalogActionName(instancePtr, eActionHandle);
			}
		}

		public static void ISteamInput_StopAnalogActionMomentum(IntPtr instancePtr, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_StopAnalogActionMomentum(instancePtr, inputHandle, eAction);
			} else {
				NativeMethodsUnderlying.ISteamInput_StopAnalogActionMomentum(instancePtr, inputHandle, eAction);
			}
		}

		public static InputMotionData_t ISteamInput_GetMotionData(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetMotionData(instancePtr, inputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetMotionData(instancePtr, inputHandle);
			}
		}

		public static void ISteamInput_TriggerVibration(IntPtr instancePtr, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_TriggerVibration(instancePtr, inputHandle, usLeftSpeed, usRightSpeed);
			} else {
				NativeMethodsUnderlying.ISteamInput_TriggerVibration(instancePtr, inputHandle, usLeftSpeed, usRightSpeed);
			}
		}

		public static void ISteamInput_TriggerVibrationExtended(IntPtr instancePtr, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed, ushort usLeftTriggerSpeed, ushort usRightTriggerSpeed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_TriggerVibrationExtended(instancePtr, inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
			} else {
				NativeMethodsUnderlying.ISteamInput_TriggerVibrationExtended(instancePtr, inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
			}
		}

		public static void ISteamInput_TriggerSimpleHapticEvent(IntPtr instancePtr, InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, byte nIntensity, char nGainDB, byte nOtherIntensity, char nOtherGainDB) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_TriggerSimpleHapticEvent(instancePtr, inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
			} else {
				NativeMethodsUnderlying.ISteamInput_TriggerSimpleHapticEvent(instancePtr, inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
			}
		}

		public static void ISteamInput_SetLEDColor(IntPtr instancePtr, InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_SetLEDColor(instancePtr, inputHandle, nColorR, nColorG, nColorB, nFlags);
			} else {
				NativeMethodsUnderlying.ISteamInput_SetLEDColor(instancePtr, inputHandle, nColorR, nColorG, nColorB, nFlags);
			}
		}

		public static void ISteamInput_Legacy_TriggerHapticPulse(IntPtr instancePtr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_Legacy_TriggerHapticPulse(instancePtr, inputHandle, eTargetPad, usDurationMicroSec);
			} else {
				NativeMethodsUnderlying.ISteamInput_Legacy_TriggerHapticPulse(instancePtr, inputHandle, eTargetPad, usDurationMicroSec);
			}
		}

		public static void ISteamInput_Legacy_TriggerRepeatedHapticPulse(IntPtr instancePtr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_Legacy_TriggerRepeatedHapticPulse(instancePtr, inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			} else {
				NativeMethodsUnderlying.ISteamInput_Legacy_TriggerRepeatedHapticPulse(instancePtr, inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}
		}

		public static bool ISteamInput_ShowBindingPanel(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_ShowBindingPanel(instancePtr, inputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_ShowBindingPanel(instancePtr, inputHandle);
			}
		}

		public static ESteamInputType ISteamInput_GetInputTypeForHandle(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetInputTypeForHandle(instancePtr, inputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetInputTypeForHandle(instancePtr, inputHandle);
			}
		}

		public static ulong ISteamInput_GetControllerForGamepadIndex(IntPtr instancePtr, int nIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetControllerForGamepadIndex(instancePtr, nIndex);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetControllerForGamepadIndex(instancePtr, nIndex);
			}
		}

		public static int ISteamInput_GetGamepadIndexForController(IntPtr instancePtr, InputHandle_t ulinputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetGamepadIndexForController(instancePtr, ulinputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetGamepadIndexForController(instancePtr, ulinputHandle);
			}
		}

		public static IntPtr ISteamInput_GetStringForXboxOrigin(IntPtr instancePtr, EXboxOrigin eOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetStringForXboxOrigin(instancePtr, eOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetStringForXboxOrigin(instancePtr, eOrigin);
			}
		}

		public static IntPtr ISteamInput_GetGlyphForXboxOrigin(IntPtr instancePtr, EXboxOrigin eOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetGlyphForXboxOrigin(instancePtr, eOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetGlyphForXboxOrigin(instancePtr, eOrigin);
			}
		}

		public static EInputActionOrigin ISteamInput_GetActionOriginFromXboxOrigin(IntPtr instancePtr, InputHandle_t inputHandle, EXboxOrigin eOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetActionOriginFromXboxOrigin(instancePtr, inputHandle, eOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetActionOriginFromXboxOrigin(instancePtr, inputHandle, eOrigin);
			}
		}

		public static EInputActionOrigin ISteamInput_TranslateActionOrigin(IntPtr instancePtr, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_TranslateActionOrigin(instancePtr, eDestinationInputType, eSourceOrigin);
			} else {
				return NativeMethodsUnderlying.ISteamInput_TranslateActionOrigin(instancePtr, eDestinationInputType, eSourceOrigin);
			}
		}

		public static bool ISteamInput_GetDeviceBindingRevision(IntPtr instancePtr, InputHandle_t inputHandle, out int pMajor, out int pMinor) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetDeviceBindingRevision(instancePtr, inputHandle, out pMajor, out pMinor);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetDeviceBindingRevision(instancePtr, inputHandle, out pMajor, out pMinor);
			}
		}

		public static uint ISteamInput_GetRemotePlaySessionID(IntPtr instancePtr, InputHandle_t inputHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetRemotePlaySessionID(instancePtr, inputHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetRemotePlaySessionID(instancePtr, inputHandle);
			}
		}

		public static ushort ISteamInput_GetSessionInputConfigurationSettings(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInput_GetSessionInputConfigurationSettings(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInput_GetSessionInputConfigurationSettings(instancePtr);
			}
		}

		public static void ISteamInput_SetDualSenseTriggerEffect(IntPtr instancePtr, InputHandle_t inputHandle, IntPtr pParam) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInput_SetDualSenseTriggerEffect(instancePtr, inputHandle, pParam);
			} else {
				NativeMethodsUnderlying.ISteamInput_SetDualSenseTriggerEffect(instancePtr, inputHandle, pParam);
			}
		}

		public static EResult ISteamInventory_GetResultStatus(IntPtr instancePtr, SteamInventoryResult_t resultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetResultStatus(instancePtr, resultHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetResultStatus(instancePtr, resultHandle);
			}
		}

		public static bool ISteamInventory_GetResultItems(IntPtr instancePtr, SteamInventoryResult_t resultHandle, [In, Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetResultItems(instancePtr, resultHandle, pOutItemsArray, ref punOutItemsArraySize);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetResultItems(instancePtr, resultHandle, pOutItemsArray, ref punOutItemsArraySize);
			}
		}

		public static bool ISteamInventory_GetResultItemProperty(IntPtr instancePtr, SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetResultItemProperty(instancePtr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, ref punValueBufferSizeOut);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetResultItemProperty(instancePtr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, ref punValueBufferSizeOut);
			}
		}

		public static uint ISteamInventory_GetResultTimestamp(IntPtr instancePtr, SteamInventoryResult_t resultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetResultTimestamp(instancePtr, resultHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetResultTimestamp(instancePtr, resultHandle);
			}
		}

		public static bool ISteamInventory_CheckResultSteamID(IntPtr instancePtr, SteamInventoryResult_t resultHandle, CSteamID steamIDExpected) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_CheckResultSteamID(instancePtr, resultHandle, steamIDExpected);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_CheckResultSteamID(instancePtr, resultHandle, steamIDExpected);
			}
		}

		public static void ISteamInventory_DestroyResult(IntPtr instancePtr, SteamInventoryResult_t resultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInventory_DestroyResult(instancePtr, resultHandle);
			} else {
				NativeMethodsUnderlying.ISteamInventory_DestroyResult(instancePtr, resultHandle);
			}
		}

		public static bool ISteamInventory_GetAllItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetAllItems(instancePtr, out pResultHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetAllItems(instancePtr, out pResultHandle);
			}
		}

		public static bool ISteamInventory_GetItemsByID(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In, Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetItemsByID(instancePtr, out pResultHandle, pInstanceIDs, unCountInstanceIDs);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetItemsByID(instancePtr, out pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}
		}

		public static bool ISteamInventory_SerializeResult(IntPtr instancePtr, SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SerializeResult(instancePtr, resultHandle, pOutBuffer, out punOutBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SerializeResult(instancePtr, resultHandle, pOutBuffer, out punOutBufferSize);
			}
		}

		public static bool ISteamInventory_DeserializeResult(IntPtr instancePtr, out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.I1)] bool bRESERVED_MUST_BE_FALSE) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_DeserializeResult(instancePtr, out pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_DeserializeResult(instancePtr, out pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}
		}

		public static bool ISteamInventory_GenerateItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In, Out] SteamItemDef_t[] pArrayItemDefs, [In, Out] uint[] punArrayQuantity, uint unArrayLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GenerateItems(instancePtr, out pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GenerateItems(instancePtr, out pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}
		}

		public static bool ISteamInventory_GrantPromoItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GrantPromoItems(instancePtr, out pResultHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GrantPromoItems(instancePtr, out pResultHandle);
			}
		}

		public static bool ISteamInventory_AddPromoItem(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_AddPromoItem(instancePtr, out pResultHandle, itemDef);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_AddPromoItem(instancePtr, out pResultHandle, itemDef);
			}
		}

		public static bool ISteamInventory_AddPromoItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In, Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_AddPromoItems(instancePtr, out pResultHandle, pArrayItemDefs, unArrayLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_AddPromoItems(instancePtr, out pResultHandle, pArrayItemDefs, unArrayLength);
			}
		}

		public static bool ISteamInventory_ConsumeItem(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_ConsumeItem(instancePtr, out pResultHandle, itemConsume, unQuantity);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_ConsumeItem(instancePtr, out pResultHandle, itemConsume, unQuantity);
			}
		}

		public static bool ISteamInventory_ExchangeItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In, Out] SteamItemDef_t[] pArrayGenerate, [In, Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In, Out] SteamItemInstanceID_t[] pArrayDestroy, [In, Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_ExchangeItems(instancePtr, out pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_ExchangeItems(instancePtr, out pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}
		}

		public static bool ISteamInventory_TransferItemQuantity(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_TransferItemQuantity(instancePtr, out pResultHandle, itemIdSource, unQuantity, itemIdDest);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_TransferItemQuantity(instancePtr, out pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}
		}

		public static void ISteamInventory_SendItemDropHeartbeat(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamInventory_SendItemDropHeartbeat(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamInventory_SendItemDropHeartbeat(instancePtr);
			}
		}

		public static bool ISteamInventory_TriggerItemDrop(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_TriggerItemDrop(instancePtr, out pResultHandle, dropListDefinition);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_TriggerItemDrop(instancePtr, out pResultHandle, dropListDefinition);
			}
		}

		public static bool ISteamInventory_TradeItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In, Out] SteamItemInstanceID_t[] pArrayGive, [In, Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In, Out] SteamItemInstanceID_t[] pArrayGet, [In, Out] uint[] pArrayGetQuantity, uint nArrayGetLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_TradeItems(instancePtr, out pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_TradeItems(instancePtr, out pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}
		}

		public static bool ISteamInventory_LoadItemDefinitions(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_LoadItemDefinitions(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_LoadItemDefinitions(instancePtr);
			}
		}

		public static bool ISteamInventory_GetItemDefinitionIDs(IntPtr instancePtr, [In, Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetItemDefinitionIDs(instancePtr, pItemDefIDs, ref punItemDefIDsArraySize);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetItemDefinitionIDs(instancePtr, pItemDefIDs, ref punItemDefIDsArraySize);
			}
		}

		public static bool ISteamInventory_GetItemDefinitionProperty(IntPtr instancePtr, SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetItemDefinitionProperty(instancePtr, iDefinition, pchPropertyName, pchValueBuffer, ref punValueBufferSizeOut);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetItemDefinitionProperty(instancePtr, iDefinition, pchPropertyName, pchValueBuffer, ref punValueBufferSizeOut);
			}
		}

		public static ulong ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(instancePtr, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(instancePtr, steamID);
			}
		}

		public static bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr instancePtr, CSteamID steamID, [In, Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetEligiblePromoItemDefinitionIDs(instancePtr, steamID, pItemDefIDs, ref punItemDefIDsArraySize);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetEligiblePromoItemDefinitionIDs(instancePtr, steamID, pItemDefIDs, ref punItemDefIDsArraySize);
			}
		}

		public static ulong ISteamInventory_StartPurchase(IntPtr instancePtr, [In, Out] SteamItemDef_t[] pArrayItemDefs, [In, Out] uint[] punArrayQuantity, uint unArrayLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_StartPurchase(instancePtr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_StartPurchase(instancePtr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}
		}

		public static ulong ISteamInventory_RequestPrices(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_RequestPrices(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_RequestPrices(instancePtr);
			}
		}

		public static uint ISteamInventory_GetNumItemsWithPrices(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetNumItemsWithPrices(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetNumItemsWithPrices(instancePtr);
			}
		}

		public static bool ISteamInventory_GetItemsWithPrices(IntPtr instancePtr, [In, Out] SteamItemDef_t[] pArrayItemDefs, [In, Out] ulong[] pCurrentPrices, [In, Out] ulong[] pBasePrices, uint unArrayLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetItemsWithPrices(instancePtr, pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetItemsWithPrices(instancePtr, pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
			}
		}

		public static bool ISteamInventory_GetItemPrice(IntPtr instancePtr, SteamItemDef_t iDefinition, out ulong pCurrentPrice, out ulong pBasePrice) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_GetItemPrice(instancePtr, iDefinition, out pCurrentPrice, out pBasePrice);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_GetItemPrice(instancePtr, iDefinition, out pCurrentPrice, out pBasePrice);
			}
		}

		public static ulong ISteamInventory_StartUpdateProperties(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_StartUpdateProperties(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_StartUpdateProperties(instancePtr);
			}
		}

		public static bool ISteamInventory_RemoveProperty(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, InteropHelp.UTF8StringHandle pchPropertyName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_RemoveProperty(instancePtr, handle, nItemID, pchPropertyName);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_RemoveProperty(instancePtr, handle, nItemID, pchPropertyName);
			}
		}

		public static bool ISteamInventory_SetPropertyString(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, InteropHelp.UTF8StringHandle pchPropertyName, InteropHelp.UTF8StringHandle pchPropertyValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SetPropertyString(instancePtr, handle, nItemID, pchPropertyName, pchPropertyValue);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SetPropertyString(instancePtr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}
		}

		public static bool ISteamInventory_SetPropertyBool(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, InteropHelp.UTF8StringHandle pchPropertyName, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SetPropertyBool(instancePtr, handle, nItemID, pchPropertyName, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SetPropertyBool(instancePtr, handle, nItemID, pchPropertyName, bValue);
			}
		}

		public static bool ISteamInventory_SetPropertyInt64(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, InteropHelp.UTF8StringHandle pchPropertyName, long nValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SetPropertyInt64(instancePtr, handle, nItemID, pchPropertyName, nValue);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SetPropertyInt64(instancePtr, handle, nItemID, pchPropertyName, nValue);
			}
		}

		public static bool ISteamInventory_SetPropertyFloat(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, InteropHelp.UTF8StringHandle pchPropertyName, float flValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SetPropertyFloat(instancePtr, handle, nItemID, pchPropertyName, flValue);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SetPropertyFloat(instancePtr, handle, nItemID, pchPropertyName, flValue);
			}
		}

		public static bool ISteamInventory_SubmitUpdateProperties(IntPtr instancePtr, SteamInventoryUpdateHandle_t handle, out SteamInventoryResult_t pResultHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_SubmitUpdateProperties(instancePtr, handle, out pResultHandle);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_SubmitUpdateProperties(instancePtr, handle, out pResultHandle);
			}
		}

		public static bool ISteamInventory_InspectItem(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, InteropHelp.UTF8StringHandle pchItemToken) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamInventory_InspectItem(instancePtr, out pResultHandle, pchItemToken);
			} else {
				return NativeMethodsUnderlying.ISteamInventory_InspectItem(instancePtr, out pResultHandle, pchItemToken);
			}
		}

		public static int ISteamMatchmaking_GetFavoriteGameCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetFavoriteGameCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetFavoriteGameCount(instancePtr);
			}
		}

		public static bool ISteamMatchmaking_GetFavoriteGame(IntPtr instancePtr, int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetFavoriteGame(instancePtr, iGame, out pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetFavoriteGame(instancePtr, iGame, out pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}
		}

		public static int ISteamMatchmaking_AddFavoriteGame(IntPtr instancePtr, AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddFavoriteGame(instancePtr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_AddFavoriteGame(instancePtr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}
		}

		public static bool ISteamMatchmaking_RemoveFavoriteGame(IntPtr instancePtr, AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_RemoveFavoriteGame(instancePtr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_RemoveFavoriteGame(instancePtr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}
		}

		public static ulong ISteamMatchmaking_RequestLobbyList(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_RequestLobbyList(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_RequestLobbyList(instancePtr);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListStringFilter(instancePtr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListStringFilter(instancePtr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListNumericalFilter(instancePtr, pchKeyToMatch, nValueToMatch, eComparisonType);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListNumericalFilter(instancePtr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListNearValueFilter(instancePtr, pchKeyToMatch, nValueToBeCloseTo);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListNearValueFilter(instancePtr, pchKeyToMatch, nValueToBeCloseTo);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr instancePtr, int nSlotsAvailable) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(instancePtr, nSlotsAvailable);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(instancePtr, nSlotsAvailable);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr instancePtr, ELobbyDistanceFilter eLobbyDistanceFilter) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListDistanceFilter(instancePtr, eLobbyDistanceFilter);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListDistanceFilter(instancePtr, eLobbyDistanceFilter);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr instancePtr, int cMaxResults) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListResultCountFilter(instancePtr, cMaxResults);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListResultCountFilter(instancePtr, cMaxResults);
			}
		}

		public static void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(instancePtr, steamIDLobby);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(instancePtr, steamIDLobby);
			}
		}

		public static ulong ISteamMatchmaking_GetLobbyByIndex(IntPtr instancePtr, int iLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyByIndex(instancePtr, iLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyByIndex(instancePtr, iLobby);
			}
		}

		public static ulong ISteamMatchmaking_CreateLobby(IntPtr instancePtr, ELobbyType eLobbyType, int cMaxMembers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_CreateLobby(instancePtr, eLobbyType, cMaxMembers);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_CreateLobby(instancePtr, eLobbyType, cMaxMembers);
			}
		}

		public static ulong ISteamMatchmaking_JoinLobby(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_JoinLobby(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_JoinLobby(instancePtr, steamIDLobby);
			}
		}

		public static void ISteamMatchmaking_LeaveLobby(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_LeaveLobby(instancePtr, steamIDLobby);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_LeaveLobby(instancePtr, steamIDLobby);
			}
		}

		public static bool ISteamMatchmaking_InviteUserToLobby(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDInvitee) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_InviteUserToLobby(instancePtr, steamIDLobby, steamIDInvitee);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_InviteUserToLobby(instancePtr, steamIDLobby, steamIDInvitee);
			}
		}

		public static int ISteamMatchmaking_GetNumLobbyMembers(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetNumLobbyMembers(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetNumLobbyMembers(instancePtr, steamIDLobby);
			}
		}

		public static ulong ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr instancePtr, CSteamID steamIDLobby, int iMember) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyMemberByIndex(instancePtr, steamIDLobby, iMember);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyMemberByIndex(instancePtr, steamIDLobby, iMember);
			}
		}

		public static IntPtr ISteamMatchmaking_GetLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyData(instancePtr, steamIDLobby, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyData(instancePtr, steamIDLobby, pchKey);
			}
		}

		public static bool ISteamMatchmaking_SetLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyData(instancePtr, steamIDLobby, pchKey, pchValue);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyData(instancePtr, steamIDLobby, pchKey, pchValue);
			}
		}

		public static int ISteamMatchmaking_GetLobbyDataCount(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyDataCount(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyDataCount(instancePtr, steamIDLobby);
			}
		}

		public static bool ISteamMatchmaking_GetLobbyDataByIndex(IntPtr instancePtr, CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyDataByIndex(instancePtr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyDataByIndex(instancePtr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}
		}

		public static bool ISteamMatchmaking_DeleteLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_DeleteLobbyData(instancePtr, steamIDLobby, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_DeleteLobbyData(instancePtr, steamIDLobby, pchKey);
			}
		}

		public static IntPtr ISteamMatchmaking_GetLobbyMemberData(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyMemberData(instancePtr, steamIDLobby, steamIDUser, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyMemberData(instancePtr, steamIDLobby, steamIDUser, pchKey);
			}
		}

		public static void ISteamMatchmaking_SetLobbyMemberData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyMemberData(instancePtr, steamIDLobby, pchKey, pchValue);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyMemberData(instancePtr, steamIDLobby, pchKey, pchValue);
			}
		}

		public static bool ISteamMatchmaking_SendLobbyChatMsg(IntPtr instancePtr, CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SendLobbyChatMsg(instancePtr, steamIDLobby, pvMsgBody, cubMsgBody);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SendLobbyChatMsg(instancePtr, steamIDLobby, pvMsgBody, cubMsgBody);
			}
		}

		public static int ISteamMatchmaking_GetLobbyChatEntry(IntPtr instancePtr, CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyChatEntry(instancePtr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyChatEntry(instancePtr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}
		}

		public static bool ISteamMatchmaking_RequestLobbyData(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_RequestLobbyData(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_RequestLobbyData(instancePtr, steamIDLobby);
			}
		}

		public static void ISteamMatchmaking_SetLobbyGameServer(IntPtr instancePtr, CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyGameServer(instancePtr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyGameServer(instancePtr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}
		}

		public static bool ISteamMatchmaking_GetLobbyGameServer(IntPtr instancePtr, CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyGameServer(instancePtr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyGameServer(instancePtr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}
		}

		public static bool ISteamMatchmaking_SetLobbyMemberLimit(IntPtr instancePtr, CSteamID steamIDLobby, int cMaxMembers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyMemberLimit(instancePtr, steamIDLobby, cMaxMembers);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyMemberLimit(instancePtr, steamIDLobby, cMaxMembers);
			}
		}

		public static int ISteamMatchmaking_GetLobbyMemberLimit(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyMemberLimit(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyMemberLimit(instancePtr, steamIDLobby);
			}
		}

		public static bool ISteamMatchmaking_SetLobbyType(IntPtr instancePtr, CSteamID steamIDLobby, ELobbyType eLobbyType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyType(instancePtr, steamIDLobby, eLobbyType);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyType(instancePtr, steamIDLobby, eLobbyType);
			}
		}

		public static bool ISteamMatchmaking_SetLobbyJoinable(IntPtr instancePtr, CSteamID steamIDLobby, [MarshalAs(UnmanagedType.I1)] bool bLobbyJoinable) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyJoinable(instancePtr, steamIDLobby, bLobbyJoinable);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyJoinable(instancePtr, steamIDLobby, bLobbyJoinable);
			}
		}

		public static ulong ISteamMatchmaking_GetLobbyOwner(IntPtr instancePtr, CSteamID steamIDLobby) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_GetLobbyOwner(instancePtr, steamIDLobby);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_GetLobbyOwner(instancePtr, steamIDLobby);
			}
		}

		public static bool ISteamMatchmaking_SetLobbyOwner(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDNewOwner) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLobbyOwner(instancePtr, steamIDLobby, steamIDNewOwner);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLobbyOwner(instancePtr, steamIDLobby, steamIDNewOwner);
			}
		}

		public static bool ISteamMatchmaking_SetLinkedLobby(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDLobbyDependent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmaking_SetLinkedLobby(instancePtr, steamIDLobby, steamIDLobbyDependent);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmaking_SetLinkedLobby(instancePtr, steamIDLobby, steamIDLobbyDependent);
			}
		}

		public static void ISteamMatchmaking_CheckForPSNGameBootInvite(IntPtr instancePtr, uint iGameBootAttributes) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmaking_CheckForPSNGameBootInvite(instancePtr, iGameBootAttributes);
			} else {
				NativeMethodsUnderlying.ISteamMatchmaking_CheckForPSNGameBootInvite(instancePtr, iGameBootAttributes);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestInternetServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestInternetServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestInternetServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestLANServerList(IntPtr instancePtr, AppId_t iApp, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestLANServerList(instancePtr, iApp, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestLANServerList(instancePtr, iApp, pRequestServersResponse);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestFriendsServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestFriendsServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestFriendsServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestFavoritesServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestFavoritesServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestHistoryServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestHistoryServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestHistoryServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}
		}

		public static IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RequestSpectatorServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_RequestSpectatorServerList(instancePtr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}
		}

		public static void ISteamMatchmakingServers_ReleaseRequest(IntPtr instancePtr, HServerListRequest hServerListRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_ReleaseRequest(instancePtr, hServerListRequest);
			} else {
				NativeMethodsUnderlying.ISteamMatchmakingServers_ReleaseRequest(instancePtr, hServerListRequest);
			}
		}

		public static IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr instancePtr, HServerListRequest hRequest, int iServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_GetServerDetails(instancePtr, hRequest, iServer);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_GetServerDetails(instancePtr, hRequest, iServer);
			}
		}

		public static void ISteamMatchmakingServers_CancelQuery(IntPtr instancePtr, HServerListRequest hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_CancelQuery(instancePtr, hRequest);
			} else {
				NativeMethodsUnderlying.ISteamMatchmakingServers_CancelQuery(instancePtr, hRequest);
			}
		}

		public static void ISteamMatchmakingServers_RefreshQuery(IntPtr instancePtr, HServerListRequest hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RefreshQuery(instancePtr, hRequest);
			} else {
				NativeMethodsUnderlying.ISteamMatchmakingServers_RefreshQuery(instancePtr, hRequest);
			}
		}

		public static bool ISteamMatchmakingServers_IsRefreshing(IntPtr instancePtr, HServerListRequest hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_IsRefreshing(instancePtr, hRequest);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_IsRefreshing(instancePtr, hRequest);
			}
		}

		public static int ISteamMatchmakingServers_GetServerCount(IntPtr instancePtr, HServerListRequest hRequest) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_GetServerCount(instancePtr, hRequest);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_GetServerCount(instancePtr, hRequest);
			}
		}

		public static void ISteamMatchmakingServers_RefreshServer(IntPtr instancePtr, HServerListRequest hRequest, int iServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_RefreshServer(instancePtr, hRequest, iServer);
			} else {
				NativeMethodsUnderlying.ISteamMatchmakingServers_RefreshServer(instancePtr, hRequest, iServer);
			}
		}

		public static int ISteamMatchmakingServers_PingServer(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_PingServer(instancePtr, unIP, usPort, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_PingServer(instancePtr, unIP, usPort, pRequestServersResponse);
			}
		}

		public static int ISteamMatchmakingServers_PlayerDetails(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_PlayerDetails(instancePtr, unIP, usPort, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_PlayerDetails(instancePtr, unIP, usPort, pRequestServersResponse);
			}
		}

		public static int ISteamMatchmakingServers_ServerRules(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_ServerRules(instancePtr, unIP, usPort, pRequestServersResponse);
			} else {
				return NativeMethodsUnderlying.ISteamMatchmakingServers_ServerRules(instancePtr, unIP, usPort, pRequestServersResponse);
			}
		}

		public static void ISteamMatchmakingServers_CancelServerQuery(IntPtr instancePtr, HServerQuery hServerQuery) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMatchmakingServers_CancelServerQuery(instancePtr, hServerQuery);
			} else {
				NativeMethodsUnderlying.ISteamMatchmakingServers_CancelServerQuery(instancePtr, hServerQuery);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_AddGameSearchParams(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToFind, InteropHelp.UTF8StringHandle pchValuesToFind) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_AddGameSearchParams(instancePtr, pchKeyToFind, pchValuesToFind);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_AddGameSearchParams(instancePtr, pchKeyToFind, pchValuesToFind);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_SearchForGameWithLobby(IntPtr instancePtr, CSteamID steamIDLobby, int nPlayerMin, int nPlayerMax) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_SearchForGameWithLobby(instancePtr, steamIDLobby, nPlayerMin, nPlayerMax);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_SearchForGameWithLobby(instancePtr, steamIDLobby, nPlayerMin, nPlayerMax);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_SearchForGameSolo(IntPtr instancePtr, int nPlayerMin, int nPlayerMax) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_SearchForGameSolo(instancePtr, nPlayerMin, nPlayerMax);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_SearchForGameSolo(instancePtr, nPlayerMin, nPlayerMax);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_AcceptGame(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_AcceptGame(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_AcceptGame(instancePtr);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_DeclineGame(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_DeclineGame(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_DeclineGame(instancePtr);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_RetrieveConnectionDetails(IntPtr instancePtr, CSteamID steamIDHost, IntPtr pchConnectionDetails, int cubConnectionDetails) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_RetrieveConnectionDetails(instancePtr, steamIDHost, pchConnectionDetails, cubConnectionDetails);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_RetrieveConnectionDetails(instancePtr, steamIDHost, pchConnectionDetails, cubConnectionDetails);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_EndGameSearch(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_EndGameSearch(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_EndGameSearch(instancePtr);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_SetGameHostParams(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_SetGameHostParams(instancePtr, pchKey, pchValue);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_SetGameHostParams(instancePtr, pchKey, pchValue);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_SetConnectionDetails(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchConnectionDetails, int cubConnectionDetails) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_SetConnectionDetails(instancePtr, pchConnectionDetails, cubConnectionDetails);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_SetConnectionDetails(instancePtr, pchConnectionDetails, cubConnectionDetails);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_RequestPlayersForGame(IntPtr instancePtr, int nPlayerMin, int nPlayerMax, int nMaxTeamSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_RequestPlayersForGame(instancePtr, nPlayerMin, nPlayerMax, nMaxTeamSize);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_RequestPlayersForGame(instancePtr, nPlayerMin, nPlayerMax, nMaxTeamSize);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_HostConfirmGameStart(IntPtr instancePtr, ulong ullUniqueGameID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_HostConfirmGameStart(instancePtr, ullUniqueGameID);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_HostConfirmGameStart(instancePtr, ullUniqueGameID);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_CancelRequestPlayersForGame(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_CancelRequestPlayersForGame(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_CancelRequestPlayersForGame(instancePtr);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_SubmitPlayerResult(IntPtr instancePtr, ulong ullUniqueGameID, CSteamID steamIDPlayer, EPlayerResult_t EPlayerResult) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_SubmitPlayerResult(instancePtr, ullUniqueGameID, steamIDPlayer, EPlayerResult);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_SubmitPlayerResult(instancePtr, ullUniqueGameID, steamIDPlayer, EPlayerResult);
			}
		}

		public static EGameSearchErrorCode_t ISteamGameSearch_EndGame(IntPtr instancePtr, ulong ullUniqueGameID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamGameSearch_EndGame(instancePtr, ullUniqueGameID);
			} else {
				return NativeMethodsUnderlying.ISteamGameSearch_EndGame(instancePtr, ullUniqueGameID);
			}
		}

		public static uint ISteamParties_GetNumActiveBeacons(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetNumActiveBeacons(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetNumActiveBeacons(instancePtr);
			}
		}

		public static ulong ISteamParties_GetBeaconByIndex(IntPtr instancePtr, uint unIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetBeaconByIndex(instancePtr, unIndex);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetBeaconByIndex(instancePtr, unIndex);
			}
		}

		public static bool ISteamParties_GetBeaconDetails(IntPtr instancePtr, PartyBeaconID_t ulBeaconID, out CSteamID pSteamIDBeaconOwner, out SteamPartyBeaconLocation_t pLocation, IntPtr pchMetadata, int cchMetadata) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetBeaconDetails(instancePtr, ulBeaconID, out pSteamIDBeaconOwner, out pLocation, pchMetadata, cchMetadata);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetBeaconDetails(instancePtr, ulBeaconID, out pSteamIDBeaconOwner, out pLocation, pchMetadata, cchMetadata);
			}
		}

		public static ulong ISteamParties_JoinParty(IntPtr instancePtr, PartyBeaconID_t ulBeaconID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_JoinParty(instancePtr, ulBeaconID);
			} else {
				return NativeMethodsUnderlying.ISteamParties_JoinParty(instancePtr, ulBeaconID);
			}
		}

		public static bool ISteamParties_GetNumAvailableBeaconLocations(IntPtr instancePtr, out uint puNumLocations) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetNumAvailableBeaconLocations(instancePtr, out puNumLocations);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetNumAvailableBeaconLocations(instancePtr, out puNumLocations);
			}
		}

		public static bool ISteamParties_GetAvailableBeaconLocations(IntPtr instancePtr, [In, Out] SteamPartyBeaconLocation_t[] pLocationList, uint uMaxNumLocations) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetAvailableBeaconLocations(instancePtr, pLocationList, uMaxNumLocations);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetAvailableBeaconLocations(instancePtr, pLocationList, uMaxNumLocations);
			}
		}

		public static ulong ISteamParties_CreateBeacon(IntPtr instancePtr, uint unOpenSlots, ref SteamPartyBeaconLocation_t pBeaconLocation, InteropHelp.UTF8StringHandle pchConnectString, InteropHelp.UTF8StringHandle pchMetadata) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_CreateBeacon(instancePtr, unOpenSlots, ref pBeaconLocation, pchConnectString, pchMetadata);
			} else {
				return NativeMethodsUnderlying.ISteamParties_CreateBeacon(instancePtr, unOpenSlots, ref pBeaconLocation, pchConnectString, pchMetadata);
			}
		}

		public static void ISteamParties_OnReservationCompleted(IntPtr instancePtr, PartyBeaconID_t ulBeacon, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamParties_OnReservationCompleted(instancePtr, ulBeacon, steamIDUser);
			} else {
				NativeMethodsUnderlying.ISteamParties_OnReservationCompleted(instancePtr, ulBeacon, steamIDUser);
			}
		}

		public static void ISteamParties_CancelReservation(IntPtr instancePtr, PartyBeaconID_t ulBeacon, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamParties_CancelReservation(instancePtr, ulBeacon, steamIDUser);
			} else {
				NativeMethodsUnderlying.ISteamParties_CancelReservation(instancePtr, ulBeacon, steamIDUser);
			}
		}

		public static ulong ISteamParties_ChangeNumOpenSlots(IntPtr instancePtr, PartyBeaconID_t ulBeacon, uint unOpenSlots) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_ChangeNumOpenSlots(instancePtr, ulBeacon, unOpenSlots);
			} else {
				return NativeMethodsUnderlying.ISteamParties_ChangeNumOpenSlots(instancePtr, ulBeacon, unOpenSlots);
			}
		}

		public static bool ISteamParties_DestroyBeacon(IntPtr instancePtr, PartyBeaconID_t ulBeacon) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_DestroyBeacon(instancePtr, ulBeacon);
			} else {
				return NativeMethodsUnderlying.ISteamParties_DestroyBeacon(instancePtr, ulBeacon);
			}
		}

		public static bool ISteamParties_GetBeaconLocationData(IntPtr instancePtr, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, IntPtr pchDataStringOut, int cchDataStringOut) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParties_GetBeaconLocationData(instancePtr, BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
			} else {
				return NativeMethodsUnderlying.ISteamParties_GetBeaconLocationData(instancePtr, BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
			}
		}

		public static bool ISteamMusic_BIsEnabled(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusic_BIsEnabled(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusic_BIsEnabled(instancePtr);
			}
		}

		public static bool ISteamMusic_BIsPlaying(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusic_BIsPlaying(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusic_BIsPlaying(instancePtr);
			}
		}

		public static AudioPlayback_Status ISteamMusic_GetPlaybackStatus(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusic_GetPlaybackStatus(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusic_GetPlaybackStatus(instancePtr);
			}
		}

		public static void ISteamMusic_Play(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMusic_Play(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamMusic_Play(instancePtr);
			}
		}

		public static void ISteamMusic_Pause(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMusic_Pause(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamMusic_Pause(instancePtr);
			}
		}

		public static void ISteamMusic_PlayPrevious(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMusic_PlayPrevious(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamMusic_PlayPrevious(instancePtr);
			}
		}

		public static void ISteamMusic_PlayNext(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMusic_PlayNext(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamMusic_PlayNext(instancePtr);
			}
		}

		public static void ISteamMusic_SetVolume(IntPtr instancePtr, float flVolume) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamMusic_SetVolume(instancePtr, flVolume);
			} else {
				NativeMethodsUnderlying.ISteamMusic_SetVolume(instancePtr, flVolume);
			}
		}

		public static float ISteamMusic_GetVolume(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusic_GetVolume(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusic_GetVolume(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_RegisterSteamMusicRemote(instancePtr, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_RegisterSteamMusicRemote(instancePtr, pchName);
			}
		}

		public static bool ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_DeregisterSteamMusicRemote(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_DeregisterSteamMusicRemote(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_BIsCurrentMusicRemote(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_BIsCurrentMusicRemote(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_BActivationSuccess(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_BActivationSuccess(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_BActivationSuccess(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_SetDisplayName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDisplayName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetDisplayName(instancePtr, pchDisplayName);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetDisplayName(instancePtr, pchDisplayName);
			}
		}

		public static bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr instancePtr, byte[] pvBuffer, uint cbBufferLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetPNGIcon_64x64(instancePtr, pvBuffer, cbBufferLength);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetPNGIcon_64x64(instancePtr, pvBuffer, cbBufferLength);
			}
		}

		public static bool ISteamMusicRemote_EnablePlayPrevious(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnablePlayPrevious(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnablePlayPrevious(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_EnablePlayNext(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnablePlayNext(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnablePlayNext(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_EnableShuffled(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnableShuffled(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnableShuffled(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_EnableLooped(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnableLooped(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnableLooped(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_EnableQueue(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnableQueue(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnableQueue(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_EnablePlaylists(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_EnablePlaylists(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_EnablePlaylists(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_UpdatePlaybackStatus(IntPtr instancePtr, AudioPlayback_Status nStatus) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdatePlaybackStatus(instancePtr, nStatus);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdatePlaybackStatus(instancePtr, nStatus);
			}
		}

		public static bool ISteamMusicRemote_UpdateShuffled(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateShuffled(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateShuffled(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_UpdateLooped(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateLooped(instancePtr, bValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateLooped(instancePtr, bValue);
			}
		}

		public static bool ISteamMusicRemote_UpdateVolume(IntPtr instancePtr, float flValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateVolume(instancePtr, flValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateVolume(instancePtr, flValue);
			}
		}

		public static bool ISteamMusicRemote_CurrentEntryWillChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_CurrentEntryWillChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_CurrentEntryWillChange(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bAvailable) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_CurrentEntryIsAvailable(instancePtr, bAvailable);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_CurrentEntryIsAvailable(instancePtr, bAvailable);
			}
		}

		public static bool ISteamMusicRemote_UpdateCurrentEntryText(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateCurrentEntryText(instancePtr, pchText);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateCurrentEntryText(instancePtr, pchText);
			}
		}

		public static bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr instancePtr, int nValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(instancePtr, nValue);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(instancePtr, nValue);
			}
		}

		public static bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr instancePtr, byte[] pvBuffer, uint cbBufferLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_UpdateCurrentEntryCoverArt(instancePtr, pvBuffer, cbBufferLength);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_UpdateCurrentEntryCoverArt(instancePtr, pvBuffer, cbBufferLength);
			}
		}

		public static bool ISteamMusicRemote_CurrentEntryDidChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_CurrentEntryDidChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_CurrentEntryDidChange(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_QueueWillChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_QueueWillChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_QueueWillChange(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_ResetQueueEntries(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_ResetQueueEntries(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_ResetQueueEntries(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_SetQueueEntry(IntPtr instancePtr, int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetQueueEntry(instancePtr, nID, nPosition, pchEntryText);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetQueueEntry(instancePtr, nID, nPosition, pchEntryText);
			}
		}

		public static bool ISteamMusicRemote_SetCurrentQueueEntry(IntPtr instancePtr, int nID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetCurrentQueueEntry(instancePtr, nID);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetCurrentQueueEntry(instancePtr, nID);
			}
		}

		public static bool ISteamMusicRemote_QueueDidChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_QueueDidChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_QueueDidChange(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_PlaylistWillChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_PlaylistWillChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_PlaylistWillChange(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_ResetPlaylistEntries(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_ResetPlaylistEntries(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_ResetPlaylistEntries(instancePtr);
			}
		}

		public static bool ISteamMusicRemote_SetPlaylistEntry(IntPtr instancePtr, int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetPlaylistEntry(instancePtr, nID, nPosition, pchEntryText);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetPlaylistEntry(instancePtr, nID, nPosition, pchEntryText);
			}
		}

		public static bool ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr instancePtr, int nID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_SetCurrentPlaylistEntry(instancePtr, nID);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_SetCurrentPlaylistEntry(instancePtr, nID);
			}
		}

		public static bool ISteamMusicRemote_PlaylistDidChange(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamMusicRemote_PlaylistDidChange(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamMusicRemote_PlaylistDidChange(instancePtr);
			}
		}

		public static bool ISteamNetworking_SendP2PPacket(IntPtr instancePtr, CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_SendP2PPacket(instancePtr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_SendP2PPacket(instancePtr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}
		}

		public static bool ISteamNetworking_IsP2PPacketAvailable(IntPtr instancePtr, out uint pcubMsgSize, int nChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_IsP2PPacketAvailable(instancePtr, out pcubMsgSize, nChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_IsP2PPacketAvailable(instancePtr, out pcubMsgSize, nChannel);
			}
		}

		public static bool ISteamNetworking_ReadP2PPacket(IntPtr instancePtr, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_ReadP2PPacket(instancePtr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_ReadP2PPacket(instancePtr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}
		}

		public static bool ISteamNetworking_AcceptP2PSessionWithUser(IntPtr instancePtr, CSteamID steamIDRemote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_AcceptP2PSessionWithUser(instancePtr, steamIDRemote);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_AcceptP2PSessionWithUser(instancePtr, steamIDRemote);
			}
		}

		public static bool ISteamNetworking_CloseP2PSessionWithUser(IntPtr instancePtr, CSteamID steamIDRemote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_CloseP2PSessionWithUser(instancePtr, steamIDRemote);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_CloseP2PSessionWithUser(instancePtr, steamIDRemote);
			}
		}

		public static bool ISteamNetworking_CloseP2PChannelWithUser(IntPtr instancePtr, CSteamID steamIDRemote, int nChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_CloseP2PChannelWithUser(instancePtr, steamIDRemote, nChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_CloseP2PChannelWithUser(instancePtr, steamIDRemote, nChannel);
			}
		}

		public static bool ISteamNetworking_GetP2PSessionState(IntPtr instancePtr, CSteamID steamIDRemote, out P2PSessionState_t pConnectionState) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_GetP2PSessionState(instancePtr, steamIDRemote, out pConnectionState);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_GetP2PSessionState(instancePtr, steamIDRemote, out pConnectionState);
			}
		}

		public static bool ISteamNetworking_AllowP2PPacketRelay(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bAllow) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_AllowP2PPacketRelay(instancePtr, bAllow);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_AllowP2PPacketRelay(instancePtr, bAllow);
			}
		}

		public static uint ISteamNetworking_CreateListenSocket(IntPtr instancePtr, int nVirtualP2PPort, SteamIPAddress_t nIP, ushort nPort, [MarshalAs(UnmanagedType.I1)] bool bAllowUseOfPacketRelay) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_CreateListenSocket(instancePtr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_CreateListenSocket(instancePtr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}
		}

		public static uint ISteamNetworking_CreateP2PConnectionSocket(IntPtr instancePtr, CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.I1)] bool bAllowUseOfPacketRelay) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_CreateP2PConnectionSocket(instancePtr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_CreateP2PConnectionSocket(instancePtr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}
		}

		public static uint ISteamNetworking_CreateConnectionSocket(IntPtr instancePtr, SteamIPAddress_t nIP, ushort nPort, int nTimeoutSec) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_CreateConnectionSocket(instancePtr, nIP, nPort, nTimeoutSec);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_CreateConnectionSocket(instancePtr, nIP, nPort, nTimeoutSec);
			}
		}

		public static bool ISteamNetworking_DestroySocket(IntPtr instancePtr, SNetSocket_t hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_DestroySocket(instancePtr, hSocket, bNotifyRemoteEnd);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_DestroySocket(instancePtr, hSocket, bNotifyRemoteEnd);
			}
		}

		public static bool ISteamNetworking_DestroyListenSocket(IntPtr instancePtr, SNetListenSocket_t hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_DestroyListenSocket(instancePtr, hSocket, bNotifyRemoteEnd);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_DestroyListenSocket(instancePtr, hSocket, bNotifyRemoteEnd);
			}
		}

		public static bool ISteamNetworking_SendDataOnSocket(IntPtr instancePtr, SNetSocket_t hSocket, byte[] pubData, uint cubData, [MarshalAs(UnmanagedType.I1)] bool bReliable) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_SendDataOnSocket(instancePtr, hSocket, pubData, cubData, bReliable);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_SendDataOnSocket(instancePtr, hSocket, pubData, cubData, bReliable);
			}
		}

		public static bool ISteamNetworking_IsDataAvailableOnSocket(IntPtr instancePtr, SNetSocket_t hSocket, out uint pcubMsgSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_IsDataAvailableOnSocket(instancePtr, hSocket, out pcubMsgSize);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_IsDataAvailableOnSocket(instancePtr, hSocket, out pcubMsgSize);
			}
		}

		public static bool ISteamNetworking_RetrieveDataFromSocket(IntPtr instancePtr, SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_RetrieveDataFromSocket(instancePtr, hSocket, pubDest, cubDest, out pcubMsgSize);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_RetrieveDataFromSocket(instancePtr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}
		}

		public static bool ISteamNetworking_IsDataAvailable(IntPtr instancePtr, SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_IsDataAvailable(instancePtr, hListenSocket, out pcubMsgSize, out phSocket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_IsDataAvailable(instancePtr, hListenSocket, out pcubMsgSize, out phSocket);
			}
		}

		public static bool ISteamNetworking_RetrieveData(IntPtr instancePtr, SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_RetrieveData(instancePtr, hListenSocket, pubDest, cubDest, out pcubMsgSize, out phSocket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_RetrieveData(instancePtr, hListenSocket, pubDest, cubDest, out pcubMsgSize, out phSocket);
			}
		}

		public static bool ISteamNetworking_GetSocketInfo(IntPtr instancePtr, SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out SteamIPAddress_t punIPRemote, out ushort punPortRemote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_GetSocketInfo(instancePtr, hSocket, out pSteamIDRemote, out peSocketStatus, out punIPRemote, out punPortRemote);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_GetSocketInfo(instancePtr, hSocket, out pSteamIDRemote, out peSocketStatus, out punIPRemote, out punPortRemote);
			}
		}

		public static bool ISteamNetworking_GetListenSocketInfo(IntPtr instancePtr, SNetListenSocket_t hListenSocket, out SteamIPAddress_t pnIP, out ushort pnPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_GetListenSocketInfo(instancePtr, hListenSocket, out pnIP, out pnPort);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_GetListenSocketInfo(instancePtr, hListenSocket, out pnIP, out pnPort);
			}
		}

		public static ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(IntPtr instancePtr, SNetSocket_t hSocket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_GetSocketConnectionType(instancePtr, hSocket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_GetSocketConnectionType(instancePtr, hSocket);
			}
		}

		public static int ISteamNetworking_GetMaxPacketSize(IntPtr instancePtr, SNetSocket_t hSocket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworking_GetMaxPacketSize(instancePtr, hSocket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworking_GetMaxPacketSize(instancePtr, hSocket);
			}
		}

		public static EResult ISteamNetworkingMessages_SendMessageToUser(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote, IntPtr pubData, uint cubData, int nSendFlags, int nRemoteChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_SendMessageToUser(instancePtr, ref identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_SendMessageToUser(instancePtr, ref identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
			}
		}

		public static int ISteamNetworkingMessages_ReceiveMessagesOnChannel(IntPtr instancePtr, int nLocalChannel, [In, Out] IntPtr[] ppOutMessages, int nMaxMessages) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_ReceiveMessagesOnChannel(instancePtr, nLocalChannel, ppOutMessages, nMaxMessages);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_ReceiveMessagesOnChannel(instancePtr, nLocalChannel, ppOutMessages, nMaxMessages);
			}
		}

		public static bool ISteamNetworkingMessages_AcceptSessionWithUser(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_AcceptSessionWithUser(instancePtr, ref identityRemote);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_AcceptSessionWithUser(instancePtr, ref identityRemote);
			}
		}

		public static bool ISteamNetworkingMessages_CloseSessionWithUser(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_CloseSessionWithUser(instancePtr, ref identityRemote);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_CloseSessionWithUser(instancePtr, ref identityRemote);
			}
		}

		public static bool ISteamNetworkingMessages_CloseChannelWithUser(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote, int nLocalChannel) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_CloseChannelWithUser(instancePtr, ref identityRemote, nLocalChannel);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_CloseChannelWithUser(instancePtr, ref identityRemote, nLocalChannel);
			}
		}

		public static ESteamNetworkingConnectionState ISteamNetworkingMessages_GetSessionConnectionInfo(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote, out SteamNetConnectionInfo_t pConnectionInfo, out SteamNetConnectionRealTimeStatus_t pQuickStatus) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingMessages_GetSessionConnectionInfo(instancePtr, ref identityRemote, out pConnectionInfo, out pQuickStatus);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingMessages_GetSessionConnectionInfo(instancePtr, ref identityRemote, out pConnectionInfo, out pQuickStatus);
			}
		}

		public static uint ISteamNetworkingSockets_CreateListenSocketIP(IntPtr instancePtr, ref SteamNetworkingIPAddr localAddress, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateListenSocketIP(instancePtr, ref localAddress, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateListenSocketIP(instancePtr, ref localAddress, nOptions, pOptions);
			}
		}

		public static uint ISteamNetworkingSockets_ConnectByIPAddress(IntPtr instancePtr, ref SteamNetworkingIPAddr address, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ConnectByIPAddress(instancePtr, ref address, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ConnectByIPAddress(instancePtr, ref address, nOptions, pOptions);
			}
		}

		public static uint ISteamNetworkingSockets_CreateListenSocketP2P(IntPtr instancePtr, int nLocalVirtualPort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateListenSocketP2P(instancePtr, nLocalVirtualPort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateListenSocketP2P(instancePtr, nLocalVirtualPort, nOptions, pOptions);
			}
		}

		public static uint ISteamNetworkingSockets_ConnectP2P(IntPtr instancePtr, ref SteamNetworkingIdentity identityRemote, int nRemoteVirtualPort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ConnectP2P(instancePtr, ref identityRemote, nRemoteVirtualPort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ConnectP2P(instancePtr, ref identityRemote, nRemoteVirtualPort, nOptions, pOptions);
			}
		}

		public static EResult ISteamNetworkingSockets_AcceptConnection(IntPtr instancePtr, HSteamNetConnection hConn) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_AcceptConnection(instancePtr, hConn);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_AcceptConnection(instancePtr, hConn);
			}
		}

		public static bool ISteamNetworkingSockets_CloseConnection(IntPtr instancePtr, HSteamNetConnection hPeer, int nReason, InteropHelp.UTF8StringHandle pszDebug, [MarshalAs(UnmanagedType.I1)] bool bEnableLinger) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CloseConnection(instancePtr, hPeer, nReason, pszDebug, bEnableLinger);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CloseConnection(instancePtr, hPeer, nReason, pszDebug, bEnableLinger);
			}
		}

		public static bool ISteamNetworkingSockets_CloseListenSocket(IntPtr instancePtr, HSteamListenSocket hSocket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CloseListenSocket(instancePtr, hSocket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CloseListenSocket(instancePtr, hSocket);
			}
		}

		public static bool ISteamNetworkingSockets_SetConnectionUserData(IntPtr instancePtr, HSteamNetConnection hPeer, long nUserData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SetConnectionUserData(instancePtr, hPeer, nUserData);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_SetConnectionUserData(instancePtr, hPeer, nUserData);
			}
		}

		public static long ISteamNetworkingSockets_GetConnectionUserData(IntPtr instancePtr, HSteamNetConnection hPeer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetConnectionUserData(instancePtr, hPeer);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetConnectionUserData(instancePtr, hPeer);
			}
		}

		public static void ISteamNetworkingSockets_SetConnectionName(IntPtr instancePtr, HSteamNetConnection hPeer, InteropHelp.UTF8StringHandle pszName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SetConnectionName(instancePtr, hPeer, pszName);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingSockets_SetConnectionName(instancePtr, hPeer, pszName);
			}
		}

		public static bool ISteamNetworkingSockets_GetConnectionName(IntPtr instancePtr, HSteamNetConnection hPeer, IntPtr pszName, int nMaxLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetConnectionName(instancePtr, hPeer, pszName, nMaxLen);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetConnectionName(instancePtr, hPeer, pszName, nMaxLen);
			}
		}

		public static EResult ISteamNetworkingSockets_SendMessageToConnection(IntPtr instancePtr, HSteamNetConnection hConn, IntPtr pData, uint cbData, int nSendFlags, out long pOutMessageNumber) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SendMessageToConnection(instancePtr, hConn, pData, cbData, nSendFlags, out pOutMessageNumber);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_SendMessageToConnection(instancePtr, hConn, pData, cbData, nSendFlags, out pOutMessageNumber);
			}
		}

		public static void ISteamNetworkingSockets_SendMessages(IntPtr instancePtr, int nMessages, [In, Out] IntPtr[] pMessages, [In, Out] long[] pOutMessageNumberOrResult) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SendMessages(instancePtr, nMessages, pMessages, pOutMessageNumberOrResult);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingSockets_SendMessages(instancePtr, nMessages, pMessages, pOutMessageNumberOrResult);
			}
		}

		public static EResult ISteamNetworkingSockets_FlushMessagesOnConnection(IntPtr instancePtr, HSteamNetConnection hConn) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_FlushMessagesOnConnection(instancePtr, hConn);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_FlushMessagesOnConnection(instancePtr, hConn);
			}
		}

		public static int ISteamNetworkingSockets_ReceiveMessagesOnConnection(IntPtr instancePtr, HSteamNetConnection hConn, [In, Out] IntPtr[] ppOutMessages, int nMaxMessages) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ReceiveMessagesOnConnection(instancePtr, hConn, ppOutMessages, nMaxMessages);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ReceiveMessagesOnConnection(instancePtr, hConn, ppOutMessages, nMaxMessages);
			}
		}

		public static bool ISteamNetworkingSockets_GetConnectionInfo(IntPtr instancePtr, HSteamNetConnection hConn, out SteamNetConnectionInfo_t pInfo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetConnectionInfo(instancePtr, hConn, out pInfo);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetConnectionInfo(instancePtr, hConn, out pInfo);
			}
		}

		public static EResult ISteamNetworkingSockets_GetConnectionRealTimeStatus(IntPtr instancePtr, HSteamNetConnection hConn, ref SteamNetConnectionRealTimeStatus_t pStatus, int nLanes, ref SteamNetConnectionRealTimeLaneStatus_t pLanes) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetConnectionRealTimeStatus(instancePtr, hConn, ref pStatus, nLanes, ref pLanes);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetConnectionRealTimeStatus(instancePtr, hConn, ref pStatus, nLanes, ref pLanes);
			}
		}

		public static int ISteamNetworkingSockets_GetDetailedConnectionStatus(IntPtr instancePtr, HSteamNetConnection hConn, IntPtr pszBuf, int cbBuf) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetDetailedConnectionStatus(instancePtr, hConn, pszBuf, cbBuf);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetDetailedConnectionStatus(instancePtr, hConn, pszBuf, cbBuf);
			}
		}

		public static bool ISteamNetworkingSockets_GetListenSocketAddress(IntPtr instancePtr, HSteamListenSocket hSocket, out SteamNetworkingIPAddr address) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetListenSocketAddress(instancePtr, hSocket, out address);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetListenSocketAddress(instancePtr, hSocket, out address);
			}
		}

		public static bool ISteamNetworkingSockets_CreateSocketPair(IntPtr instancePtr, out HSteamNetConnection pOutConnection1, out HSteamNetConnection pOutConnection2, [MarshalAs(UnmanagedType.I1)] bool bUseNetworkLoopback, ref SteamNetworkingIdentity pIdentity1, ref SteamNetworkingIdentity pIdentity2) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateSocketPair(instancePtr, out pOutConnection1, out pOutConnection2, bUseNetworkLoopback, ref pIdentity1, ref pIdentity2);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateSocketPair(instancePtr, out pOutConnection1, out pOutConnection2, bUseNetworkLoopback, ref pIdentity1, ref pIdentity2);
			}
		}

		public static EResult ISteamNetworkingSockets_ConfigureConnectionLanes(IntPtr instancePtr, HSteamNetConnection hConn, int nNumLanes, [In, Out] int[] pLanePriorities, [In, Out] ushort[] pLaneWeights) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ConfigureConnectionLanes(instancePtr, hConn, nNumLanes, pLanePriorities, pLaneWeights);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ConfigureConnectionLanes(instancePtr, hConn, nNumLanes, pLanePriorities, pLaneWeights);
			}
		}

		public static bool ISteamNetworkingSockets_GetIdentity(IntPtr instancePtr, out SteamNetworkingIdentity pIdentity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetIdentity(instancePtr, out pIdentity);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetIdentity(instancePtr, out pIdentity);
			}
		}

		public static ESteamNetworkingAvailability ISteamNetworkingSockets_InitAuthentication(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_InitAuthentication(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_InitAuthentication(instancePtr);
			}
		}

		public static ESteamNetworkingAvailability ISteamNetworkingSockets_GetAuthenticationStatus(IntPtr instancePtr, out SteamNetAuthenticationStatus_t pDetails) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetAuthenticationStatus(instancePtr, out pDetails);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetAuthenticationStatus(instancePtr, out pDetails);
			}
		}

		public static uint ISteamNetworkingSockets_CreatePollGroup(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreatePollGroup(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreatePollGroup(instancePtr);
			}
		}

		public static bool ISteamNetworkingSockets_DestroyPollGroup(IntPtr instancePtr, HSteamNetPollGroup hPollGroup) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_DestroyPollGroup(instancePtr, hPollGroup);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_DestroyPollGroup(instancePtr, hPollGroup);
			}
		}

		public static bool ISteamNetworkingSockets_SetConnectionPollGroup(IntPtr instancePtr, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SetConnectionPollGroup(instancePtr, hConn, hPollGroup);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_SetConnectionPollGroup(instancePtr, hConn, hPollGroup);
			}
		}

		public static int ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(IntPtr instancePtr, HSteamNetPollGroup hPollGroup, [In, Out] IntPtr[] ppOutMessages, int nMaxMessages) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(instancePtr, hPollGroup, ppOutMessages, nMaxMessages);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(instancePtr, hPollGroup, ppOutMessages, nMaxMessages);
			}
		}

		public static bool ISteamNetworkingSockets_ReceivedRelayAuthTicket(IntPtr instancePtr, IntPtr pvTicket, int cbTicket, out SteamDatagramRelayAuthTicket pOutParsedTicket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ReceivedRelayAuthTicket(instancePtr, pvTicket, cbTicket, out pOutParsedTicket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ReceivedRelayAuthTicket(instancePtr, pvTicket, cbTicket, out pOutParsedTicket);
			}
		}

		public static int ISteamNetworkingSockets_FindRelayAuthTicketForServer(IntPtr instancePtr, ref SteamNetworkingIdentity identityGameServer, int nRemoteVirtualPort, out SteamDatagramRelayAuthTicket pOutParsedTicket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_FindRelayAuthTicketForServer(instancePtr, ref identityGameServer, nRemoteVirtualPort, out pOutParsedTicket);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_FindRelayAuthTicketForServer(instancePtr, ref identityGameServer, nRemoteVirtualPort, out pOutParsedTicket);
			}
		}

		public static uint ISteamNetworkingSockets_ConnectToHostedDedicatedServer(IntPtr instancePtr, ref SteamNetworkingIdentity identityTarget, int nRemoteVirtualPort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ConnectToHostedDedicatedServer(instancePtr, ref identityTarget, nRemoteVirtualPort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ConnectToHostedDedicatedServer(instancePtr, ref identityTarget, nRemoteVirtualPort, nOptions, pOptions);
			}
		}

		public static ushort ISteamNetworkingSockets_GetHostedDedicatedServerPort(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetHostedDedicatedServerPort(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetHostedDedicatedServerPort(instancePtr);
			}
		}

		public static uint ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(instancePtr);
			}
		}

		public static EResult ISteamNetworkingSockets_GetHostedDedicatedServerAddress(IntPtr instancePtr, out SteamDatagramHostedAddress pRouting) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetHostedDedicatedServerAddress(instancePtr, out pRouting);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetHostedDedicatedServerAddress(instancePtr, out pRouting);
			}
		}

		public static uint ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(IntPtr instancePtr, int nLocalVirtualPort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(instancePtr, nLocalVirtualPort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(instancePtr, nLocalVirtualPort, nOptions, pOptions);
			}
		}

		public static EResult ISteamNetworkingSockets_GetGameCoordinatorServerLogin(IntPtr instancePtr, IntPtr pLoginInfo, out int pcbSignedBlob, IntPtr pBlob) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetGameCoordinatorServerLogin(instancePtr, pLoginInfo, out pcbSignedBlob, pBlob);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetGameCoordinatorServerLogin(instancePtr, pLoginInfo, out pcbSignedBlob, pBlob);
			}
		}

		public static uint ISteamNetworkingSockets_ConnectP2PCustomSignaling(IntPtr instancePtr, out ISteamNetworkingConnectionSignaling pSignaling, ref SteamNetworkingIdentity pPeerIdentity, int nRemoteVirtualPort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ConnectP2PCustomSignaling(instancePtr, out pSignaling, ref pPeerIdentity, nRemoteVirtualPort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ConnectP2PCustomSignaling(instancePtr, out pSignaling, ref pPeerIdentity, nRemoteVirtualPort, nOptions, pOptions);
			}
		}

		public static bool ISteamNetworkingSockets_ReceivedP2PCustomSignal(IntPtr instancePtr, IntPtr pMsg, int cbMsg, out ISteamNetworkingSignalingRecvContext pContext) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ReceivedP2PCustomSignal(instancePtr, pMsg, cbMsg, out pContext);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_ReceivedP2PCustomSignal(instancePtr, pMsg, cbMsg, out pContext);
			}
		}

		public static bool ISteamNetworkingSockets_GetCertificateRequest(IntPtr instancePtr, out int pcbBlob, IntPtr pBlob, out SteamNetworkingErrMsg errMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetCertificateRequest(instancePtr, out pcbBlob, pBlob, out errMsg);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetCertificateRequest(instancePtr, out pcbBlob, pBlob, out errMsg);
			}
		}

		public static bool ISteamNetworkingSockets_SetCertificate(IntPtr instancePtr, IntPtr pCertificate, int cbCertificate, out SteamNetworkingErrMsg errMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_SetCertificate(instancePtr, pCertificate, cbCertificate, out errMsg);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_SetCertificate(instancePtr, pCertificate, cbCertificate, out errMsg);
			}
		}

		public static void ISteamNetworkingSockets_ResetIdentity(IntPtr instancePtr, ref SteamNetworkingIdentity pIdentity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_ResetIdentity(instancePtr, ref pIdentity);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingSockets_ResetIdentity(instancePtr, ref pIdentity);
			}
		}

		public static void ISteamNetworkingSockets_RunCallbacks(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_RunCallbacks(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingSockets_RunCallbacks(instancePtr);
			}
		}

		public static bool ISteamNetworkingSockets_BeginAsyncRequestFakeIP(IntPtr instancePtr, int nNumPorts) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_BeginAsyncRequestFakeIP(instancePtr, nNumPorts);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_BeginAsyncRequestFakeIP(instancePtr, nNumPorts);
			}
		}

		public static void ISteamNetworkingSockets_GetFakeIP(IntPtr instancePtr, int idxFirstPort, out SteamNetworkingFakeIPResult_t pInfo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetFakeIP(instancePtr, idxFirstPort, out pInfo);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingSockets_GetFakeIP(instancePtr, idxFirstPort, out pInfo);
			}
		}

		public static uint ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(IntPtr instancePtr, int idxFakePort, int nOptions, [In, Out] SteamNetworkingConfigValue_t[] pOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(instancePtr, idxFakePort, nOptions, pOptions);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(instancePtr, idxFakePort, nOptions, pOptions);
			}
		}

		public static EResult ISteamNetworkingSockets_GetRemoteFakeIPForConnection(IntPtr instancePtr, HSteamNetConnection hConn, out SteamNetworkingIPAddr pOutAddr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_GetRemoteFakeIPForConnection(instancePtr, hConn, out pOutAddr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_GetRemoteFakeIPForConnection(instancePtr, hConn, out pOutAddr);
			}
		}

		public static IntPtr ISteamNetworkingSockets_CreateFakeUDPPort(IntPtr instancePtr, int idxFakeServerPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingSockets_CreateFakeUDPPort(instancePtr, idxFakeServerPort);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingSockets_CreateFakeUDPPort(instancePtr, idxFakeServerPort);
			}
		}

		public static IntPtr ISteamNetworkingUtils_AllocateMessage(IntPtr instancePtr, int cbAllocateBuffer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_AllocateMessage(instancePtr, cbAllocateBuffer);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_AllocateMessage(instancePtr, cbAllocateBuffer);
			}
		}

		public static void ISteamNetworkingUtils_InitRelayNetworkAccess(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_InitRelayNetworkAccess(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingUtils_InitRelayNetworkAccess(instancePtr);
			}
		}

		public static ESteamNetworkingAvailability ISteamNetworkingUtils_GetRelayNetworkStatus(IntPtr instancePtr, out SteamRelayNetworkStatus_t pDetails) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetRelayNetworkStatus(instancePtr, out pDetails);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetRelayNetworkStatus(instancePtr, out pDetails);
			}
		}

		public static float ISteamNetworkingUtils_GetLocalPingLocation(IntPtr instancePtr, out SteamNetworkPingLocation_t result) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetLocalPingLocation(instancePtr, out result);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetLocalPingLocation(instancePtr, out result);
			}
		}

		public static int ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(IntPtr instancePtr, ref SteamNetworkPingLocation_t location1, ref SteamNetworkPingLocation_t location2) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(instancePtr, ref location1, ref location2);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(instancePtr, ref location1, ref location2);
			}
		}

		public static int ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(IntPtr instancePtr, ref SteamNetworkPingLocation_t remoteLocation) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(instancePtr, ref remoteLocation);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(instancePtr, ref remoteLocation);
			}
		}

		public static void ISteamNetworkingUtils_ConvertPingLocationToString(IntPtr instancePtr, ref SteamNetworkPingLocation_t location, IntPtr pszBuf, int cchBufSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_ConvertPingLocationToString(instancePtr, ref location, pszBuf, cchBufSize);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingUtils_ConvertPingLocationToString(instancePtr, ref location, pszBuf, cchBufSize);
			}
		}

		public static bool ISteamNetworkingUtils_ParsePingLocationString(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszString, out SteamNetworkPingLocation_t result) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_ParsePingLocationString(instancePtr, pszString, out result);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_ParsePingLocationString(instancePtr, pszString, out result);
			}
		}

		public static bool ISteamNetworkingUtils_CheckPingDataUpToDate(IntPtr instancePtr, float flMaxAgeSeconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_CheckPingDataUpToDate(instancePtr, flMaxAgeSeconds);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_CheckPingDataUpToDate(instancePtr, flMaxAgeSeconds);
			}
		}

		public static int ISteamNetworkingUtils_GetPingToDataCenter(IntPtr instancePtr, SteamNetworkingPOPID popID, out SteamNetworkingPOPID pViaRelayPoP) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetPingToDataCenter(instancePtr, popID, out pViaRelayPoP);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetPingToDataCenter(instancePtr, popID, out pViaRelayPoP);
			}
		}

		public static int ISteamNetworkingUtils_GetDirectPingToPOP(IntPtr instancePtr, SteamNetworkingPOPID popID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetDirectPingToPOP(instancePtr, popID);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetDirectPingToPOP(instancePtr, popID);
			}
		}

		public static int ISteamNetworkingUtils_GetPOPCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetPOPCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetPOPCount(instancePtr);
			}
		}

		public static int ISteamNetworkingUtils_GetPOPList(IntPtr instancePtr, out SteamNetworkingPOPID list, int nListSz) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetPOPList(instancePtr, out list, nListSz);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetPOPList(instancePtr, out list, nListSz);
			}
		}

		public static long ISteamNetworkingUtils_GetLocalTimestamp(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetLocalTimestamp(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetLocalTimestamp(instancePtr);
			}
		}

		public static void ISteamNetworkingUtils_SetDebugOutputFunction(IntPtr instancePtr, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SetDebugOutputFunction(instancePtr, eDetailLevel, pfnFunc);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingUtils_SetDebugOutputFunction(instancePtr, eDetailLevel, pfnFunc);
			}
		}

		public static bool ISteamNetworkingUtils_IsFakeIPv4(IntPtr instancePtr, uint nIPv4) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_IsFakeIPv4(instancePtr, nIPv4);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_IsFakeIPv4(instancePtr, nIPv4);
			}
		}

		public static ESteamNetworkingFakeIPType ISteamNetworkingUtils_GetIPv4FakeIPType(IntPtr instancePtr, uint nIPv4) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetIPv4FakeIPType(instancePtr, nIPv4);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetIPv4FakeIPType(instancePtr, nIPv4);
			}
		}

		public static EResult ISteamNetworkingUtils_GetRealIdentityForFakeIP(IntPtr instancePtr, ref SteamNetworkingIPAddr fakeIP, out SteamNetworkingIdentity pOutRealIdentity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetRealIdentityForFakeIP(instancePtr, ref fakeIP, out pOutRealIdentity);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetRealIdentityForFakeIP(instancePtr, ref fakeIP, out pOutRealIdentity);
			}
		}

		public static bool ISteamNetworkingUtils_SetConfigValue(IntPtr instancePtr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, IntPtr scopeObj, ESteamNetworkingConfigDataType eDataType, IntPtr pArg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SetConfigValue(instancePtr, eValue, eScopeType, scopeObj, eDataType, pArg);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_SetConfigValue(instancePtr, eValue, eScopeType, scopeObj, eDataType, pArg);
			}
		}

		public static ESteamNetworkingGetConfigValueResult ISteamNetworkingUtils_GetConfigValue(IntPtr instancePtr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, IntPtr scopeObj, out ESteamNetworkingConfigDataType pOutDataType, IntPtr pResult, ref ulong cbResult) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetConfigValue(instancePtr, eValue, eScopeType, scopeObj, out pOutDataType, pResult, ref cbResult);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetConfigValue(instancePtr, eValue, eScopeType, scopeObj, out pOutDataType, pResult, ref cbResult);
			}
		}

		public static IntPtr ISteamNetworkingUtils_GetConfigValueInfo(IntPtr instancePtr, ESteamNetworkingConfigValue eValue, out ESteamNetworkingConfigDataType pOutDataType, out ESteamNetworkingConfigScope pOutScope) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_GetConfigValueInfo(instancePtr, eValue, out pOutDataType, out pOutScope);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_GetConfigValueInfo(instancePtr, eValue, out pOutDataType, out pOutScope);
			}
		}

		public static ESteamNetworkingConfigValue ISteamNetworkingUtils_IterateGenericEditableConfigValues(IntPtr instancePtr, ESteamNetworkingConfigValue eCurrent, [MarshalAs(UnmanagedType.I1)] bool bEnumerateDevVars) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_IterateGenericEditableConfigValues(instancePtr, eCurrent, bEnumerateDevVars);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_IterateGenericEditableConfigValues(instancePtr, eCurrent, bEnumerateDevVars);
			}
		}

		public static void ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(IntPtr instancePtr, ref SteamNetworkingIPAddr addr, IntPtr buf, uint cbBuf, [MarshalAs(UnmanagedType.I1)] bool bWithPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(instancePtr, ref addr, buf, cbBuf, bWithPort);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(instancePtr, ref addr, buf, cbBuf, bWithPort);
			}
		}

		public static bool ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(IntPtr instancePtr, out SteamNetworkingIPAddr pAddr, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(instancePtr, out pAddr, pszStr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(instancePtr, out pAddr, pszStr);
			}
		}

		public static ESteamNetworkingFakeIPType ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(IntPtr instancePtr, ref SteamNetworkingIPAddr addr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(instancePtr, ref addr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(instancePtr, ref addr);
			}
		}

		public static void ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(IntPtr instancePtr, ref SteamNetworkingIdentity identity, IntPtr buf, uint cbBuf) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(instancePtr, ref identity, buf, cbBuf);
			} else {
				NativeMethodsUnderlying.ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(instancePtr, ref identity, buf, cbBuf);
			}
		}

		public static bool ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(IntPtr instancePtr, out SteamNetworkingIdentity pIdentity, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(instancePtr, out pIdentity, pszStr);
			} else {
				return NativeMethodsUnderlying.ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(instancePtr, out pIdentity, pszStr);
			}
		}

		public static bool ISteamParentalSettings_BIsParentalLockEnabled(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsParentalLockEnabled(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsParentalLockEnabled(instancePtr);
			}
		}

		public static bool ISteamParentalSettings_BIsParentalLockLocked(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsParentalLockLocked(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsParentalLockLocked(instancePtr);
			}
		}

		public static bool ISteamParentalSettings_BIsAppBlocked(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsAppBlocked(instancePtr, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsAppBlocked(instancePtr, nAppID);
			}
		}

		public static bool ISteamParentalSettings_BIsAppInBlockList(IntPtr instancePtr, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsAppInBlockList(instancePtr, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsAppInBlockList(instancePtr, nAppID);
			}
		}

		public static bool ISteamParentalSettings_BIsFeatureBlocked(IntPtr instancePtr, EParentalFeature eFeature) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsFeatureBlocked(instancePtr, eFeature);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsFeatureBlocked(instancePtr, eFeature);
			}
		}

		public static bool ISteamParentalSettings_BIsFeatureInBlockList(IntPtr instancePtr, EParentalFeature eFeature) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamParentalSettings_BIsFeatureInBlockList(instancePtr, eFeature);
			} else {
				return NativeMethodsUnderlying.ISteamParentalSettings_BIsFeatureInBlockList(instancePtr, eFeature);
			}
		}

		public static uint ISteamRemotePlay_GetSessionCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_GetSessionCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_GetSessionCount(instancePtr);
			}
		}

		public static uint ISteamRemotePlay_GetSessionID(IntPtr instancePtr, int iSessionIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_GetSessionID(instancePtr, iSessionIndex);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_GetSessionID(instancePtr, iSessionIndex);
			}
		}

		public static ulong ISteamRemotePlay_GetSessionSteamID(IntPtr instancePtr, RemotePlaySessionID_t unSessionID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_GetSessionSteamID(instancePtr, unSessionID);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_GetSessionSteamID(instancePtr, unSessionID);
			}
		}

		public static IntPtr ISteamRemotePlay_GetSessionClientName(IntPtr instancePtr, RemotePlaySessionID_t unSessionID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_GetSessionClientName(instancePtr, unSessionID);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_GetSessionClientName(instancePtr, unSessionID);
			}
		}

		public static ESteamDeviceFormFactor ISteamRemotePlay_GetSessionClientFormFactor(IntPtr instancePtr, RemotePlaySessionID_t unSessionID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_GetSessionClientFormFactor(instancePtr, unSessionID);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_GetSessionClientFormFactor(instancePtr, unSessionID);
			}
		}

		public static bool ISteamRemotePlay_BGetSessionClientResolution(IntPtr instancePtr, RemotePlaySessionID_t unSessionID, out int pnResolutionX, out int pnResolutionY) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_BGetSessionClientResolution(instancePtr, unSessionID, out pnResolutionX, out pnResolutionY);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_BGetSessionClientResolution(instancePtr, unSessionID, out pnResolutionX, out pnResolutionY);
			}
		}

		public static bool ISteamRemotePlay_BStartRemotePlayTogether(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bShowOverlay) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_BStartRemotePlayTogether(instancePtr, bShowOverlay);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_BStartRemotePlayTogether(instancePtr, bShowOverlay);
			}
		}

		public static bool ISteamRemotePlay_BSendRemotePlayTogetherInvite(IntPtr instancePtr, CSteamID steamIDFriend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemotePlay_BSendRemotePlayTogetherInvite(instancePtr, steamIDFriend);
			} else {
				return NativeMethodsUnderlying.ISteamRemotePlay_BSendRemotePlayTogetherInvite(instancePtr, steamIDFriend);
			}
		}

		public static bool ISteamRemoteStorage_FileWrite(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWrite(instancePtr, pchFile, pvData, cubData);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWrite(instancePtr, pchFile, pvData, cubData);
			}
		}

		public static int ISteamRemoteStorage_FileRead(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubDataToRead) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileRead(instancePtr, pchFile, pvData, cubDataToRead);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileRead(instancePtr, pchFile, pvData, cubDataToRead);
			}
		}

		public static ulong ISteamRemoteStorage_FileWriteAsync(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, uint cubData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWriteAsync(instancePtr, pchFile, pvData, cubData);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWriteAsync(instancePtr, pchFile, pvData, cubData);
			}
		}

		public static ulong ISteamRemoteStorage_FileReadAsync(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, uint nOffset, uint cubToRead) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileReadAsync(instancePtr, pchFile, nOffset, cubToRead);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileReadAsync(instancePtr, pchFile, nOffset, cubToRead);
			}
		}

		public static bool ISteamRemoteStorage_FileReadAsyncComplete(IntPtr instancePtr, SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileReadAsyncComplete(instancePtr, hReadCall, pvBuffer, cubToRead);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileReadAsyncComplete(instancePtr, hReadCall, pvBuffer, cubToRead);
			}
		}

		public static bool ISteamRemoteStorage_FileForget(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileForget(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileForget(instancePtr, pchFile);
			}
		}

		public static bool ISteamRemoteStorage_FileDelete(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileDelete(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileDelete(instancePtr, pchFile);
			}
		}

		public static ulong ISteamRemoteStorage_FileShare(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileShare(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileShare(instancePtr, pchFile);
			}
		}

		public static bool ISteamRemoteStorage_SetSyncPlatforms(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_SetSyncPlatforms(instancePtr, pchFile, eRemoteStoragePlatform);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_SetSyncPlatforms(instancePtr, pchFile, eRemoteStoragePlatform);
			}
		}

		public static ulong ISteamRemoteStorage_FileWriteStreamOpen(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWriteStreamOpen(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWriteStreamOpen(instancePtr, pchFile);
			}
		}

		public static bool ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWriteStreamWriteChunk(instancePtr, writeHandle, pvData, cubData);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWriteStreamWriteChunk(instancePtr, writeHandle, pvData, cubData);
			}
		}

		public static bool ISteamRemoteStorage_FileWriteStreamClose(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWriteStreamClose(instancePtr, writeHandle);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWriteStreamClose(instancePtr, writeHandle);
			}
		}

		public static bool ISteamRemoteStorage_FileWriteStreamCancel(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileWriteStreamCancel(instancePtr, writeHandle);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileWriteStreamCancel(instancePtr, writeHandle);
			}
		}

		public static bool ISteamRemoteStorage_FileExists(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FileExists(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FileExists(instancePtr, pchFile);
			}
		}

		public static bool ISteamRemoteStorage_FilePersisted(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_FilePersisted(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_FilePersisted(instancePtr, pchFile);
			}
		}

		public static int ISteamRemoteStorage_GetFileSize(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetFileSize(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetFileSize(instancePtr, pchFile);
			}
		}

		public static long ISteamRemoteStorage_GetFileTimestamp(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetFileTimestamp(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetFileTimestamp(instancePtr, pchFile);
			}
		}

		public static ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetSyncPlatforms(instancePtr, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetSyncPlatforms(instancePtr, pchFile);
			}
		}

		public static int ISteamRemoteStorage_GetFileCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetFileCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetFileCount(instancePtr);
			}
		}

		public static IntPtr ISteamRemoteStorage_GetFileNameAndSize(IntPtr instancePtr, int iFile, out int pnFileSizeInBytes) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetFileNameAndSize(instancePtr, iFile, out pnFileSizeInBytes);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetFileNameAndSize(instancePtr, iFile, out pnFileSizeInBytes);
			}
		}

		public static bool ISteamRemoteStorage_GetQuota(IntPtr instancePtr, out ulong pnTotalBytes, out ulong puAvailableBytes) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetQuota(instancePtr, out pnTotalBytes, out puAvailableBytes);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetQuota(instancePtr, out pnTotalBytes, out puAvailableBytes);
			}
		}

		public static bool ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_IsCloudEnabledForAccount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_IsCloudEnabledForAccount(instancePtr);
			}
		}

		public static bool ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_IsCloudEnabledForApp(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_IsCloudEnabledForApp(instancePtr);
			}
		}

		public static void ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bEnabled) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamRemoteStorage_SetCloudEnabledForApp(instancePtr, bEnabled);
			} else {
				NativeMethodsUnderlying.ISteamRemoteStorage_SetCloudEnabledForApp(instancePtr, bEnabled);
			}
		}

		public static ulong ISteamRemoteStorage_UGCDownload(IntPtr instancePtr, UGCHandle_t hContent, uint unPriority) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UGCDownload(instancePtr, hContent, unPriority);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UGCDownload(instancePtr, hContent, unPriority);
			}
		}

		public static bool ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr instancePtr, UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetUGCDownloadProgress(instancePtr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetUGCDownloadProgress(instancePtr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}
		}

		public static bool ISteamRemoteStorage_GetUGCDetails(IntPtr instancePtr, UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetUGCDetails(instancePtr, hContent, out pnAppID, out ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetUGCDetails(instancePtr, hContent, out pnAppID, out ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}
		}

		public static int ISteamRemoteStorage_UGCRead(IntPtr instancePtr, UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UGCRead(instancePtr, hContent, pvData, cubDataToRead, cOffset, eAction);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UGCRead(instancePtr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}
		}

		public static int ISteamRemoteStorage_GetCachedUGCCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetCachedUGCCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetCachedUGCCount(instancePtr);
			}
		}

		public static ulong ISteamRemoteStorage_GetCachedUGCHandle(IntPtr instancePtr, int iCachedContent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetCachedUGCHandle(instancePtr, iCachedContent);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetCachedUGCHandle(instancePtr, iCachedContent);
			}
		}

		public static ulong ISteamRemoteStorage_PublishWorkshopFile(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_PublishWorkshopFile(instancePtr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_PublishWorkshopFile(instancePtr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
			}
		}

		public static ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_CreatePublishedFileUpdateRequest(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_CreatePublishedFileUpdateRequest(instancePtr, unPublishedFileId);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileFile(instancePtr, updateHandle, pchFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileFile(instancePtr, updateHandle, pchFile);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFilePreviewFile(instancePtr, updateHandle, pchPreviewFile);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFilePreviewFile(instancePtr, updateHandle, pchPreviewFile);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileTitle(instancePtr, updateHandle, pchTitle);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileTitle(instancePtr, updateHandle, pchTitle);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileDescription(instancePtr, updateHandle, pchDescription);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileDescription(instancePtr, updateHandle, pchDescription);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileVisibility(instancePtr, updateHandle, eVisibility);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileVisibility(instancePtr, updateHandle, eVisibility);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, IntPtr pTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileTags(instancePtr, updateHandle, pTags);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileTags(instancePtr, updateHandle, pTags);
			}
		}

		public static ulong ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_CommitPublishedFileUpdate(instancePtr, updateHandle);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_CommitPublishedFileUpdate(instancePtr, updateHandle);
			}
		}

		public static ulong ISteamRemoteStorage_GetPublishedFileDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetPublishedFileDetails(instancePtr, unPublishedFileId, unMaxSecondsOld);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetPublishedFileDetails(instancePtr, unPublishedFileId, unMaxSecondsOld);
			}
		}

		public static ulong ISteamRemoteStorage_DeletePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_DeletePublishedFile(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_DeletePublishedFile(instancePtr, unPublishedFileId);
			}
		}

		public static ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr instancePtr, uint unStartIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EnumerateUserPublishedFiles(instancePtr, unStartIndex);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EnumerateUserPublishedFiles(instancePtr, unStartIndex);
			}
		}

		public static ulong ISteamRemoteStorage_SubscribePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_SubscribePublishedFile(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_SubscribePublishedFile(instancePtr, unPublishedFileId);
			}
		}

		public static ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr instancePtr, uint unStartIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EnumerateUserSubscribedFiles(instancePtr, unStartIndex);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EnumerateUserSubscribedFiles(instancePtr, unStartIndex);
			}
		}

		public static ulong ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UnsubscribePublishedFile(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UnsubscribePublishedFile(instancePtr, unPublishedFileId);
			}
		}

		public static bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(instancePtr, updateHandle, pchChangeDescription);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(instancePtr, updateHandle, pchChangeDescription);
			}
		}

		public static ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetPublishedItemVoteDetails(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetPublishedItemVoteDetails(instancePtr, unPublishedFileId);
			}
		}

		public static ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, [MarshalAs(UnmanagedType.I1)] bool bVoteUp) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UpdateUserPublishedItemVote(instancePtr, unPublishedFileId, bVoteUp);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UpdateUserPublishedItemVote(instancePtr, unPublishedFileId, bVoteUp);
			}
		}

		public static ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetUserPublishedItemVoteDetails(instancePtr, unPublishedFileId);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetUserPublishedItemVoteDetails(instancePtr, unPublishedFileId);
			}
		}

		public static ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr instancePtr, CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(instancePtr, steamId, unStartIndex, pRequiredTags, pExcludedTags);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(instancePtr, steamId, unStartIndex, pRequiredTags, pExcludedTags);
			}
		}

		public static ulong ISteamRemoteStorage_PublishVideo(IntPtr instancePtr, EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_PublishVideo(instancePtr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_PublishVideo(instancePtr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
			}
		}

		public static ulong ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_SetUserPublishedFileAction(instancePtr, unPublishedFileId, eAction);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_SetUserPublishedFileAction(instancePtr, unPublishedFileId, eAction);
			}
		}

		public static ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr instancePtr, EWorkshopFileAction eAction, uint unStartIndex) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(instancePtr, eAction, unStartIndex);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(instancePtr, eAction, unStartIndex);
			}
		}

		public static ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr instancePtr, EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(instancePtr, eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(instancePtr, eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
			}
		}

		public static ulong ISteamRemoteStorage_UGCDownloadToLocation(IntPtr instancePtr, UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_UGCDownloadToLocation(instancePtr, hContent, pchLocation, unPriority);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_UGCDownloadToLocation(instancePtr, hContent, pchLocation, unPriority);
			}
		}

		public static int ISteamRemoteStorage_GetLocalFileChangeCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetLocalFileChangeCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetLocalFileChangeCount(instancePtr);
			}
		}

		public static IntPtr ISteamRemoteStorage_GetLocalFileChange(IntPtr instancePtr, int iFile, out ERemoteStorageLocalFileChange pEChangeType, out ERemoteStorageFilePathType pEFilePathType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_GetLocalFileChange(instancePtr, iFile, out pEChangeType, out pEFilePathType);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_GetLocalFileChange(instancePtr, iFile, out pEChangeType, out pEFilePathType);
			}
		}

		public static bool ISteamRemoteStorage_BeginFileWriteBatch(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_BeginFileWriteBatch(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_BeginFileWriteBatch(instancePtr);
			}
		}

		public static bool ISteamRemoteStorage_EndFileWriteBatch(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamRemoteStorage_EndFileWriteBatch(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamRemoteStorage_EndFileWriteBatch(instancePtr);
			}
		}

		public static uint ISteamScreenshots_WriteScreenshot(IntPtr instancePtr, byte[] pubRGB, uint cubRGB, int nWidth, int nHeight) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_WriteScreenshot(instancePtr, pubRGB, cubRGB, nWidth, nHeight);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_WriteScreenshot(instancePtr, pubRGB, cubRGB, nWidth, nHeight);
			}
		}

		public static uint ISteamScreenshots_AddScreenshotToLibrary(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_AddScreenshotToLibrary(instancePtr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_AddScreenshotToLibrary(instancePtr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}
		}

		public static void ISteamScreenshots_TriggerScreenshot(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamScreenshots_TriggerScreenshot(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamScreenshots_TriggerScreenshot(instancePtr);
			}
		}

		public static void ISteamScreenshots_HookScreenshots(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bHook) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamScreenshots_HookScreenshots(instancePtr, bHook);
			} else {
				NativeMethodsUnderlying.ISteamScreenshots_HookScreenshots(instancePtr, bHook);
			}
		}

		public static bool ISteamScreenshots_SetLocation(IntPtr instancePtr, ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_SetLocation(instancePtr, hScreenshot, pchLocation);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_SetLocation(instancePtr, hScreenshot, pchLocation);
			}
		}

		public static bool ISteamScreenshots_TagUser(IntPtr instancePtr, ScreenshotHandle hScreenshot, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_TagUser(instancePtr, hScreenshot, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_TagUser(instancePtr, hScreenshot, steamID);
			}
		}

		public static bool ISteamScreenshots_TagPublishedFile(IntPtr instancePtr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_TagPublishedFile(instancePtr, hScreenshot, unPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_TagPublishedFile(instancePtr, hScreenshot, unPublishedFileID);
			}
		}

		public static bool ISteamScreenshots_IsScreenshotsHooked(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_IsScreenshotsHooked(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_IsScreenshotsHooked(instancePtr);
			}
		}

		public static uint ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr instancePtr, EVRScreenshotType eType, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchVRFilename) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamScreenshots_AddVRScreenshotToLibrary(instancePtr, eType, pchFilename, pchVRFilename);
			} else {
				return NativeMethodsUnderlying.ISteamScreenshots_AddVRScreenshotToLibrary(instancePtr, eType, pchFilename, pchVRFilename);
			}
		}

		public static void ISteamTimeline_SetTimelineTooltip(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDescription, float flTimeDelta) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_SetTimelineTooltip(instancePtr, pchDescription, flTimeDelta);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_SetTimelineTooltip(instancePtr, pchDescription, flTimeDelta);
			}
		}

		public static void ISteamTimeline_ClearTimelineTooltip(IntPtr instancePtr, float flTimeDelta) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_ClearTimelineTooltip(instancePtr, flTimeDelta);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_ClearTimelineTooltip(instancePtr, flTimeDelta);
			}
		}

		public static void ISteamTimeline_SetTimelineGameMode(IntPtr instancePtr, ETimelineGameMode eMode) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_SetTimelineGameMode(instancePtr, eMode);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_SetTimelineGameMode(instancePtr, eMode);
			}
		}

		public static ulong ISteamTimeline_AddInstantaneousTimelineEvent(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, InteropHelp.UTF8StringHandle pchIcon, uint unIconPriority, float flStartOffsetSeconds, ETimelineEventClipPriority ePossibleClip) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamTimeline_AddInstantaneousTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, ePossibleClip);
			} else {
				return NativeMethodsUnderlying.ISteamTimeline_AddInstantaneousTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, ePossibleClip);
			}
		}

		public static ulong ISteamTimeline_AddRangeTimelineEvent(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, InteropHelp.UTF8StringHandle pchIcon, uint unIconPriority, float flStartOffsetSeconds, float flDuration, ETimelineEventClipPriority ePossibleClip) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamTimeline_AddRangeTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, flDuration, ePossibleClip);
			} else {
				return NativeMethodsUnderlying.ISteamTimeline_AddRangeTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, flDuration, ePossibleClip);
			}
		}

		public static ulong ISteamTimeline_StartRangeTimelineEvent(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, InteropHelp.UTF8StringHandle pchIcon, uint unPriority, float flStartOffsetSeconds, ETimelineEventClipPriority ePossibleClip) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamTimeline_StartRangeTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unPriority, flStartOffsetSeconds, ePossibleClip);
			} else {
				return NativeMethodsUnderlying.ISteamTimeline_StartRangeTimelineEvent(instancePtr, pchTitle, pchDescription, pchIcon, unPriority, flStartOffsetSeconds, ePossibleClip);
			}
		}

		public static void ISteamTimeline_UpdateRangeTimelineEvent(IntPtr instancePtr, TimelineEventHandle_t ulEvent, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, InteropHelp.UTF8StringHandle pchIcon, uint unPriority, ETimelineEventClipPriority ePossibleClip) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_UpdateRangeTimelineEvent(instancePtr, ulEvent, pchTitle, pchDescription, pchIcon, unPriority, ePossibleClip);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_UpdateRangeTimelineEvent(instancePtr, ulEvent, pchTitle, pchDescription, pchIcon, unPriority, ePossibleClip);
			}
		}

		public static void ISteamTimeline_EndRangeTimelineEvent(IntPtr instancePtr, TimelineEventHandle_t ulEvent, float flEndOffsetSeconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_EndRangeTimelineEvent(instancePtr, ulEvent, flEndOffsetSeconds);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_EndRangeTimelineEvent(instancePtr, ulEvent, flEndOffsetSeconds);
			}
		}

		public static void ISteamTimeline_RemoveTimelineEvent(IntPtr instancePtr, TimelineEventHandle_t ulEvent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_RemoveTimelineEvent(instancePtr, ulEvent);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_RemoveTimelineEvent(instancePtr, ulEvent);
			}
		}

		public static ulong ISteamTimeline_DoesEventRecordingExist(IntPtr instancePtr, TimelineEventHandle_t ulEvent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamTimeline_DoesEventRecordingExist(instancePtr, ulEvent);
			} else {
				return NativeMethodsUnderlying.ISteamTimeline_DoesEventRecordingExist(instancePtr, ulEvent);
			}
		}

		public static void ISteamTimeline_StartGamePhase(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_StartGamePhase(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_StartGamePhase(instancePtr);
			}
		}

		public static void ISteamTimeline_EndGamePhase(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_EndGamePhase(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_EndGamePhase(instancePtr);
			}
		}

		public static void ISteamTimeline_SetGamePhaseID(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchPhaseID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_SetGamePhaseID(instancePtr, pchPhaseID);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_SetGamePhaseID(instancePtr, pchPhaseID);
			}
		}

		public static ulong ISteamTimeline_DoesGamePhaseRecordingExist(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchPhaseID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamTimeline_DoesGamePhaseRecordingExist(instancePtr, pchPhaseID);
			} else {
				return NativeMethodsUnderlying.ISteamTimeline_DoesGamePhaseRecordingExist(instancePtr, pchPhaseID);
			}
		}

		public static void ISteamTimeline_AddGamePhaseTag(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchTagName, InteropHelp.UTF8StringHandle pchTagIcon, InteropHelp.UTF8StringHandle pchTagGroup, uint unPriority) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_AddGamePhaseTag(instancePtr, pchTagName, pchTagIcon, pchTagGroup, unPriority);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_AddGamePhaseTag(instancePtr, pchTagName, pchTagIcon, pchTagGroup, unPriority);
			}
		}

		public static void ISteamTimeline_SetGamePhaseAttribute(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchAttributeGroup, InteropHelp.UTF8StringHandle pchAttributeValue, uint unPriority) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_SetGamePhaseAttribute(instancePtr, pchAttributeGroup, pchAttributeValue, unPriority);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_SetGamePhaseAttribute(instancePtr, pchAttributeGroup, pchAttributeValue, unPriority);
			}
		}

		public static void ISteamTimeline_OpenOverlayToGamePhase(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchPhaseID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_OpenOverlayToGamePhase(instancePtr, pchPhaseID);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_OpenOverlayToGamePhase(instancePtr, pchPhaseID);
			}
		}

		public static void ISteamTimeline_OpenOverlayToTimelineEvent(IntPtr instancePtr, TimelineEventHandle_t ulEvent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamTimeline_OpenOverlayToTimelineEvent(instancePtr, ulEvent);
			} else {
				NativeMethodsUnderlying.ISteamTimeline_OpenOverlayToTimelineEvent(instancePtr, ulEvent);
			}
		}

		public static ulong ISteamUGC_CreateQueryUserUGCRequest(IntPtr instancePtr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_CreateQueryUserUGCRequest(instancePtr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_CreateQueryUserUGCRequest(instancePtr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}
		}

		public static ulong ISteamUGC_CreateQueryAllUGCRequestPage(IntPtr instancePtr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_CreateQueryAllUGCRequestPage(instancePtr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_CreateQueryAllUGCRequestPage(instancePtr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}
		}

		public static ulong ISteamUGC_CreateQueryAllUGCRequestCursor(IntPtr instancePtr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, InteropHelp.UTF8StringHandle pchCursor) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_CreateQueryAllUGCRequestCursor(instancePtr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_CreateQueryAllUGCRequestCursor(instancePtr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
			}
		}

		public static ulong ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr instancePtr, [In, Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_CreateQueryUGCDetailsRequest(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_CreateQueryUGCDetailsRequest(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			}
		}

		public static ulong ISteamUGC_SendQueryUGCRequest(IntPtr instancePtr, UGCQueryHandle_t handle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SendQueryUGCRequest(instancePtr, handle);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SendQueryUGCRequest(instancePtr, handle);
			}
		}

		public static bool ISteamUGC_GetQueryUGCResult(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCResult(instancePtr, handle, index, out pDetails);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCResult(instancePtr, handle, index, out pDetails);
			}
		}

		public static uint ISteamUGC_GetQueryUGCNumTags(IntPtr instancePtr, UGCQueryHandle_t handle, uint index) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCNumTags(instancePtr, handle, index);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCNumTags(instancePtr, handle, index);
			}
		}

		public static bool ISteamUGC_GetQueryUGCTag(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint indexTag, IntPtr pchValue, uint cchValueSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCTag(instancePtr, handle, index, indexTag, pchValue, cchValueSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCTag(instancePtr, handle, index, indexTag, pchValue, cchValueSize);
			}
		}

		public static bool ISteamUGC_GetQueryUGCTagDisplayName(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint indexTag, IntPtr pchValue, uint cchValueSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCTagDisplayName(instancePtr, handle, index, indexTag, pchValue, cchValueSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCTagDisplayName(instancePtr, handle, index, indexTag, pchValue, cchValueSize);
			}
		}

		public static bool ISteamUGC_GetQueryUGCPreviewURL(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCPreviewURL(instancePtr, handle, index, pchURL, cchURLSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCPreviewURL(instancePtr, handle, index, pchURL, cchURLSize);
			}
		}

		public static bool ISteamUGC_GetQueryUGCMetadata(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCMetadata(instancePtr, handle, index, pchMetadata, cchMetadatasize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCMetadata(instancePtr, handle, index, pchMetadata, cchMetadatasize);
			}
		}

		public static bool ISteamUGC_GetQueryUGCChildren(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, [In, Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCChildren(instancePtr, handle, index, pvecPublishedFileID, cMaxEntries);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCChildren(instancePtr, handle, index, pvecPublishedFileID, cMaxEntries);
			}
		}

		public static bool ISteamUGC_GetQueryUGCStatistic(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCStatistic(instancePtr, handle, index, eStatType, out pStatValue);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCStatistic(instancePtr, handle, index, eStatType, out pStatValue);
			}
		}

		public static uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr instancePtr, UGCQueryHandle_t handle, uint index) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCNumAdditionalPreviews(instancePtr, handle, index);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCNumAdditionalPreviews(instancePtr, handle, index);
			}
		}

		public static bool ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCAdditionalPreview(instancePtr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCAdditionalPreview(instancePtr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}
		}

		public static uint ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr instancePtr, UGCQueryHandle_t handle, uint index) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCNumKeyValueTags(instancePtr, handle, index);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCNumKeyValueTags(instancePtr, handle, index);
			}
		}

		public static bool ISteamUGC_GetQueryUGCKeyValueTag(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCKeyValueTag(instancePtr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCKeyValueTag(instancePtr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}
		}

		public static bool ISteamUGC_GetQueryFirstUGCKeyValueTag(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, InteropHelp.UTF8StringHandle pchKey, IntPtr pchValue, uint cchValueSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryFirstUGCKeyValueTag(instancePtr, handle, index, pchKey, pchValue, cchValueSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryFirstUGCKeyValueTag(instancePtr, handle, index, pchKey, pchValue, cchValueSize);
			}
		}

		public static uint ISteamUGC_GetNumSupportedGameVersions(IntPtr instancePtr, UGCQueryHandle_t handle, uint index) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetNumSupportedGameVersions(instancePtr, handle, index);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetNumSupportedGameVersions(instancePtr, handle, index);
			}
		}

		public static bool ISteamUGC_GetSupportedGameVersionData(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint versionIndex, IntPtr pchGameBranchMin, IntPtr pchGameBranchMax, uint cchGameBranchSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetSupportedGameVersionData(instancePtr, handle, index, versionIndex, pchGameBranchMin, pchGameBranchMax, cchGameBranchSize);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetSupportedGameVersionData(instancePtr, handle, index, versionIndex, pchGameBranchMin, pchGameBranchMax, cchGameBranchSize);
			}
		}

		public static uint ISteamUGC_GetQueryUGCContentDescriptors(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, [In, Out] EUGCContentDescriptorID[] pvecDescriptors, uint cMaxEntries) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetQueryUGCContentDescriptors(instancePtr, handle, index, pvecDescriptors, cMaxEntries);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetQueryUGCContentDescriptors(instancePtr, handle, index, pvecDescriptors, cMaxEntries);
			}
		}

		public static bool ISteamUGC_ReleaseQueryUGCRequest(IntPtr instancePtr, UGCQueryHandle_t handle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_ReleaseQueryUGCRequest(instancePtr, handle);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_ReleaseQueryUGCRequest(instancePtr, handle);
			}
		}

		public static bool ISteamUGC_AddRequiredTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddRequiredTag(instancePtr, handle, pTagName);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddRequiredTag(instancePtr, handle, pTagName);
			}
		}

		public static bool ISteamUGC_AddRequiredTagGroup(IntPtr instancePtr, UGCQueryHandle_t handle, IntPtr pTagGroups) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddRequiredTagGroup(instancePtr, handle, pTagGroups);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddRequiredTagGroup(instancePtr, handle, pTagGroups);
			}
		}

		public static bool ISteamUGC_AddExcludedTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddExcludedTag(instancePtr, handle, pTagName);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddExcludedTag(instancePtr, handle, pTagName);
			}
		}

		public static bool ISteamUGC_SetReturnOnlyIDs(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnOnlyIDs) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnOnlyIDs(instancePtr, handle, bReturnOnlyIDs);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnOnlyIDs(instancePtr, handle, bReturnOnlyIDs);
			}
		}

		public static bool ISteamUGC_SetReturnKeyValueTags(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnKeyValueTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnKeyValueTags(instancePtr, handle, bReturnKeyValueTags);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnKeyValueTags(instancePtr, handle, bReturnKeyValueTags);
			}
		}

		public static bool ISteamUGC_SetReturnLongDescription(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnLongDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnLongDescription(instancePtr, handle, bReturnLongDescription);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnLongDescription(instancePtr, handle, bReturnLongDescription);
			}
		}

		public static bool ISteamUGC_SetReturnMetadata(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnMetadata) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnMetadata(instancePtr, handle, bReturnMetadata);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnMetadata(instancePtr, handle, bReturnMetadata);
			}
		}

		public static bool ISteamUGC_SetReturnChildren(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnChildren) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnChildren(instancePtr, handle, bReturnChildren);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnChildren(instancePtr, handle, bReturnChildren);
			}
		}

		public static bool ISteamUGC_SetReturnAdditionalPreviews(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnAdditionalPreviews) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnAdditionalPreviews(instancePtr, handle, bReturnAdditionalPreviews);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnAdditionalPreviews(instancePtr, handle, bReturnAdditionalPreviews);
			}
		}

		public static bool ISteamUGC_SetReturnTotalOnly(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bReturnTotalOnly) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnTotalOnly(instancePtr, handle, bReturnTotalOnly);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnTotalOnly(instancePtr, handle, bReturnTotalOnly);
			}
		}

		public static bool ISteamUGC_SetReturnPlaytimeStats(IntPtr instancePtr, UGCQueryHandle_t handle, uint unDays) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetReturnPlaytimeStats(instancePtr, handle, unDays);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetReturnPlaytimeStats(instancePtr, handle, unDays);
			}
		}

		public static bool ISteamUGC_SetLanguage(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetLanguage(instancePtr, handle, pchLanguage);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetLanguage(instancePtr, handle, pchLanguage);
			}
		}

		public static bool ISteamUGC_SetAllowCachedResponse(IntPtr instancePtr, UGCQueryHandle_t handle, uint unMaxAgeSeconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetAllowCachedResponse(instancePtr, handle, unMaxAgeSeconds);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetAllowCachedResponse(instancePtr, handle, unMaxAgeSeconds);
			}
		}

		public static bool ISteamUGC_SetAdminQuery(IntPtr instancePtr, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bAdminQuery) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetAdminQuery(instancePtr, handle, bAdminQuery);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetAdminQuery(instancePtr, handle, bAdminQuery);
			}
		}

		public static bool ISteamUGC_SetCloudFileNameFilter(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetCloudFileNameFilter(instancePtr, handle, pMatchCloudFileName);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetCloudFileNameFilter(instancePtr, handle, pMatchCloudFileName);
			}
		}

		public static bool ISteamUGC_SetMatchAnyTag(IntPtr instancePtr, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bMatchAnyTag) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetMatchAnyTag(instancePtr, handle, bMatchAnyTag);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetMatchAnyTag(instancePtr, handle, bMatchAnyTag);
			}
		}

		public static bool ISteamUGC_SetSearchText(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetSearchText(instancePtr, handle, pSearchText);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetSearchText(instancePtr, handle, pSearchText);
			}
		}

		public static bool ISteamUGC_SetRankedByTrendDays(IntPtr instancePtr, UGCQueryHandle_t handle, uint unDays) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetRankedByTrendDays(instancePtr, handle, unDays);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetRankedByTrendDays(instancePtr, handle, unDays);
			}
		}

		public static bool ISteamUGC_SetTimeCreatedDateRange(IntPtr instancePtr, UGCQueryHandle_t handle, uint rtStart, uint rtEnd) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetTimeCreatedDateRange(instancePtr, handle, rtStart, rtEnd);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetTimeCreatedDateRange(instancePtr, handle, rtStart, rtEnd);
			}
		}

		public static bool ISteamUGC_SetTimeUpdatedDateRange(IntPtr instancePtr, UGCQueryHandle_t handle, uint rtStart, uint rtEnd) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetTimeUpdatedDateRange(instancePtr, handle, rtStart, rtEnd);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetTimeUpdatedDateRange(instancePtr, handle, rtStart, rtEnd);
			}
		}

		public static bool ISteamUGC_AddRequiredKeyValueTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddRequiredKeyValueTag(instancePtr, handle, pKey, pValue);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddRequiredKeyValueTag(instancePtr, handle, pKey, pValue);
			}
		}

		public static ulong ISteamUGC_RequestUGCDetails(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RequestUGCDetails(instancePtr, nPublishedFileID, unMaxAgeSeconds);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RequestUGCDetails(instancePtr, nPublishedFileID, unMaxAgeSeconds);
			}
		}

		public static ulong ISteamUGC_CreateItem(IntPtr instancePtr, AppId_t nConsumerAppId, EWorkshopFileType eFileType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_CreateItem(instancePtr, nConsumerAppId, eFileType);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_CreateItem(instancePtr, nConsumerAppId, eFileType);
			}
		}

		public static ulong ISteamUGC_StartItemUpdate(IntPtr instancePtr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_StartItemUpdate(instancePtr, nConsumerAppId, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_StartItemUpdate(instancePtr, nConsumerAppId, nPublishedFileID);
			}
		}

		public static bool ISteamUGC_SetItemTitle(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemTitle(instancePtr, handle, pchTitle);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemTitle(instancePtr, handle, pchTitle);
			}
		}

		public static bool ISteamUGC_SetItemDescription(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemDescription(instancePtr, handle, pchDescription);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemDescription(instancePtr, handle, pchDescription);
			}
		}

		public static bool ISteamUGC_SetItemUpdateLanguage(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemUpdateLanguage(instancePtr, handle, pchLanguage);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemUpdateLanguage(instancePtr, handle, pchLanguage);
			}
		}

		public static bool ISteamUGC_SetItemMetadata(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemMetadata(instancePtr, handle, pchMetaData);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemMetadata(instancePtr, handle, pchMetaData);
			}
		}

		public static bool ISteamUGC_SetItemVisibility(IntPtr instancePtr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemVisibility(instancePtr, handle, eVisibility);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemVisibility(instancePtr, handle, eVisibility);
			}
		}

		public static bool ISteamUGC_SetItemTags(IntPtr instancePtr, UGCUpdateHandle_t updateHandle, IntPtr pTags, [MarshalAs(UnmanagedType.I1)] bool bAllowAdminTags) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemTags(instancePtr, updateHandle, pTags, bAllowAdminTags);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemTags(instancePtr, updateHandle, pTags, bAllowAdminTags);
			}
		}

		public static bool ISteamUGC_SetItemContent(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemContent(instancePtr, handle, pszContentFolder);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemContent(instancePtr, handle, pszContentFolder);
			}
		}

		public static bool ISteamUGC_SetItemPreview(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetItemPreview(instancePtr, handle, pszPreviewFile);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetItemPreview(instancePtr, handle, pszPreviewFile);
			}
		}

		public static bool ISteamUGC_SetAllowLegacyUpload(IntPtr instancePtr, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.I1)] bool bAllowLegacyUpload) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetAllowLegacyUpload(instancePtr, handle, bAllowLegacyUpload);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetAllowLegacyUpload(instancePtr, handle, bAllowLegacyUpload);
			}
		}

		public static bool ISteamUGC_RemoveAllItemKeyValueTags(IntPtr instancePtr, UGCUpdateHandle_t handle) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveAllItemKeyValueTags(instancePtr, handle);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveAllItemKeyValueTags(instancePtr, handle);
			}
		}

		public static bool ISteamUGC_RemoveItemKeyValueTags(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveItemKeyValueTags(instancePtr, handle, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveItemKeyValueTags(instancePtr, handle, pchKey);
			}
		}

		public static bool ISteamUGC_AddItemKeyValueTag(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddItemKeyValueTag(instancePtr, handle, pchKey, pchValue);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddItemKeyValueTag(instancePtr, handle, pchKey, pchValue);
			}
		}

		public static bool ISteamUGC_AddItemPreviewFile(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddItemPreviewFile(instancePtr, handle, pszPreviewFile, type);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddItemPreviewFile(instancePtr, handle, pszPreviewFile, type);
			}
		}

		public static bool ISteamUGC_AddItemPreviewVideo(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddItemPreviewVideo(instancePtr, handle, pszVideoID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddItemPreviewVideo(instancePtr, handle, pszVideoID);
			}
		}

		public static bool ISteamUGC_UpdateItemPreviewFile(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_UpdateItemPreviewFile(instancePtr, handle, index, pszPreviewFile);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_UpdateItemPreviewFile(instancePtr, handle, index, pszPreviewFile);
			}
		}

		public static bool ISteamUGC_UpdateItemPreviewVideo(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_UpdateItemPreviewVideo(instancePtr, handle, index, pszVideoID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_UpdateItemPreviewVideo(instancePtr, handle, index, pszVideoID);
			}
		}

		public static bool ISteamUGC_RemoveItemPreview(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveItemPreview(instancePtr, handle, index);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveItemPreview(instancePtr, handle, index);
			}
		}

		public static bool ISteamUGC_AddContentDescriptor(IntPtr instancePtr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddContentDescriptor(instancePtr, handle, descid);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddContentDescriptor(instancePtr, handle, descid);
			}
		}

		public static bool ISteamUGC_RemoveContentDescriptor(IntPtr instancePtr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveContentDescriptor(instancePtr, handle, descid);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveContentDescriptor(instancePtr, handle, descid);
			}
		}

		public static bool ISteamUGC_SetRequiredGameVersions(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszGameBranchMin, InteropHelp.UTF8StringHandle pszGameBranchMax) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetRequiredGameVersions(instancePtr, handle, pszGameBranchMin, pszGameBranchMax);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetRequiredGameVersions(instancePtr, handle, pszGameBranchMin, pszGameBranchMax);
			}
		}

		public static ulong ISteamUGC_SubmitItemUpdate(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SubmitItemUpdate(instancePtr, handle, pchChangeNote);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SubmitItemUpdate(instancePtr, handle, pchChangeNote);
			}
		}

		public static EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(IntPtr instancePtr, UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetItemUpdateProgress(instancePtr, handle, out punBytesProcessed, out punBytesTotal);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetItemUpdateProgress(instancePtr, handle, out punBytesProcessed, out punBytesTotal);
			}
		}

		public static ulong ISteamUGC_SetUserItemVote(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, [MarshalAs(UnmanagedType.I1)] bool bVoteUp) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SetUserItemVote(instancePtr, nPublishedFileID, bVoteUp);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SetUserItemVote(instancePtr, nPublishedFileID, bVoteUp);
			}
		}

		public static ulong ISteamUGC_GetUserItemVote(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetUserItemVote(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetUserItemVote(instancePtr, nPublishedFileID);
			}
		}

		public static ulong ISteamUGC_AddItemToFavorites(IntPtr instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddItemToFavorites(instancePtr, nAppId, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddItemToFavorites(instancePtr, nAppId, nPublishedFileID);
			}
		}

		public static ulong ISteamUGC_RemoveItemFromFavorites(IntPtr instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveItemFromFavorites(instancePtr, nAppId, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveItemFromFavorites(instancePtr, nAppId, nPublishedFileID);
			}
		}

		public static ulong ISteamUGC_SubscribeItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_SubscribeItem(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_SubscribeItem(instancePtr, nPublishedFileID);
			}
		}

		public static ulong ISteamUGC_UnsubscribeItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_UnsubscribeItem(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_UnsubscribeItem(instancePtr, nPublishedFileID);
			}
		}

		public static uint ISteamUGC_GetNumSubscribedItems(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetNumSubscribedItems(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetNumSubscribedItems(instancePtr);
			}
		}

		public static uint ISteamUGC_GetSubscribedItems(IntPtr instancePtr, [In, Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetSubscribedItems(instancePtr, pvecPublishedFileID, cMaxEntries);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetSubscribedItems(instancePtr, pvecPublishedFileID, cMaxEntries);
			}
		}

		public static uint ISteamUGC_GetItemState(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetItemState(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetItemState(instancePtr, nPublishedFileID);
			}
		}

		public static bool ISteamUGC_GetItemInstallInfo(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetItemInstallInfo(instancePtr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetItemInstallInfo(instancePtr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}
		}

		public static bool ISteamUGC_GetItemDownloadInfo(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetItemDownloadInfo(instancePtr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetItemDownloadInfo(instancePtr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}
		}

		public static bool ISteamUGC_DownloadItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, [MarshalAs(UnmanagedType.I1)] bool bHighPriority) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_DownloadItem(instancePtr, nPublishedFileID, bHighPriority);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_DownloadItem(instancePtr, nPublishedFileID, bHighPriority);
			}
		}

		public static bool ISteamUGC_BInitWorkshopForGameServer(IntPtr instancePtr, DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_BInitWorkshopForGameServer(instancePtr, unWorkshopDepotID, pszFolder);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_BInitWorkshopForGameServer(instancePtr, unWorkshopDepotID, pszFolder);
			}
		}

		public static void ISteamUGC_SuspendDownloads(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bSuspend) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUGC_SuspendDownloads(instancePtr, bSuspend);
			} else {
				NativeMethodsUnderlying.ISteamUGC_SuspendDownloads(instancePtr, bSuspend);
			}
		}

		public static ulong ISteamUGC_StartPlaytimeTracking(IntPtr instancePtr, [In, Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_StartPlaytimeTracking(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_StartPlaytimeTracking(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			}
		}

		public static ulong ISteamUGC_StopPlaytimeTracking(IntPtr instancePtr, [In, Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_StopPlaytimeTracking(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_StopPlaytimeTracking(instancePtr, pvecPublishedFileID, unNumPublishedFileIDs);
			}
		}

		public static ulong ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_StopPlaytimeTrackingForAllItems(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_StopPlaytimeTrackingForAllItems(instancePtr);
			}
		}

		public static ulong ISteamUGC_AddDependency(IntPtr instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddDependency(instancePtr, nParentPublishedFileID, nChildPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddDependency(instancePtr, nParentPublishedFileID, nChildPublishedFileID);
			}
		}

		public static ulong ISteamUGC_RemoveDependency(IntPtr instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveDependency(instancePtr, nParentPublishedFileID, nChildPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveDependency(instancePtr, nParentPublishedFileID, nChildPublishedFileID);
			}
		}

		public static ulong ISteamUGC_AddAppDependency(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_AddAppDependency(instancePtr, nPublishedFileID, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_AddAppDependency(instancePtr, nPublishedFileID, nAppID);
			}
		}

		public static ulong ISteamUGC_RemoveAppDependency(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_RemoveAppDependency(instancePtr, nPublishedFileID, nAppID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_RemoveAppDependency(instancePtr, nPublishedFileID, nAppID);
			}
		}

		public static ulong ISteamUGC_GetAppDependencies(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetAppDependencies(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetAppDependencies(instancePtr, nPublishedFileID);
			}
		}

		public static ulong ISteamUGC_DeleteItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_DeleteItem(instancePtr, nPublishedFileID);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_DeleteItem(instancePtr, nPublishedFileID);
			}
		}

		public static bool ISteamUGC_ShowWorkshopEULA(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_ShowWorkshopEULA(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_ShowWorkshopEULA(instancePtr);
			}
		}

		public static ulong ISteamUGC_GetWorkshopEULAStatus(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetWorkshopEULAStatus(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetWorkshopEULAStatus(instancePtr);
			}
		}

		public static uint ISteamUGC_GetUserContentDescriptorPreferences(IntPtr instancePtr, [In, Out] EUGCContentDescriptorID[] pvecDescriptors, uint cMaxEntries) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUGC_GetUserContentDescriptorPreferences(instancePtr, pvecDescriptors, cMaxEntries);
			} else {
				return NativeMethodsUnderlying.ISteamUGC_GetUserContentDescriptorPreferences(instancePtr, pvecDescriptors, cMaxEntries);
			}
		}

		public static int ISteamUser_GetHSteamUser(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetHSteamUser(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetHSteamUser(instancePtr);
			}
		}

		public static bool ISteamUser_BLoggedOn(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BLoggedOn(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BLoggedOn(instancePtr);
			}
		}

		public static ulong ISteamUser_GetSteamID(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetSteamID(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetSteamID(instancePtr);
			}
		}

		public static int ISteamUser_InitiateGameConnection_DEPRECATED(IntPtr instancePtr, byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.I1)] bool bSecure) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_InitiateGameConnection_DEPRECATED(instancePtr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			} else {
				return NativeMethodsUnderlying.ISteamUser_InitiateGameConnection_DEPRECATED(instancePtr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}
		}

		public static void ISteamUser_TerminateGameConnection_DEPRECATED(IntPtr instancePtr, uint unIPServer, ushort usPortServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_TerminateGameConnection_DEPRECATED(instancePtr, unIPServer, usPortServer);
			} else {
				NativeMethodsUnderlying.ISteamUser_TerminateGameConnection_DEPRECATED(instancePtr, unIPServer, usPortServer);
			}
		}

		public static void ISteamUser_TrackAppUsageEvent(IntPtr instancePtr, CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_TrackAppUsageEvent(instancePtr, gameID, eAppUsageEvent, pchExtraInfo);
			} else {
				NativeMethodsUnderlying.ISteamUser_TrackAppUsageEvent(instancePtr, gameID, eAppUsageEvent, pchExtraInfo);
			}
		}

		public static bool ISteamUser_GetUserDataFolder(IntPtr instancePtr, IntPtr pchBuffer, int cubBuffer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetUserDataFolder(instancePtr, pchBuffer, cubBuffer);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetUserDataFolder(instancePtr, pchBuffer, cubBuffer);
			}
		}

		public static void ISteamUser_StartVoiceRecording(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_StartVoiceRecording(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamUser_StartVoiceRecording(instancePtr);
			}
		}

		public static void ISteamUser_StopVoiceRecording(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_StopVoiceRecording(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamUser_StopVoiceRecording(instancePtr);
			}
		}

		public static EVoiceResult ISteamUser_GetAvailableVoice(IntPtr instancePtr, out uint pcbCompressed, IntPtr pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetAvailableVoice(instancePtr, out pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetAvailableVoice(instancePtr, out pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}
		}

		public static EVoiceResult ISteamUser_GetVoice(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.I1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, IntPtr nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetVoice(instancePtr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetVoice(instancePtr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}
		}

		public static EVoiceResult ISteamUser_DecompressVoice(IntPtr instancePtr, byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_DecompressVoice(instancePtr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			} else {
				return NativeMethodsUnderlying.ISteamUser_DecompressVoice(instancePtr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}
		}

		public static uint ISteamUser_GetVoiceOptimalSampleRate(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetVoiceOptimalSampleRate(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetVoiceOptimalSampleRate(instancePtr);
			}
		}

		public static uint ISteamUser_GetAuthSessionTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket, ref SteamNetworkingIdentity pSteamNetworkingIdentity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetAuthSessionTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket, ref pSteamNetworkingIdentity);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetAuthSessionTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket, ref pSteamNetworkingIdentity);
			}
		}

		public static uint ISteamUser_GetAuthTicketForWebApi(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchIdentity) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetAuthTicketForWebApi(instancePtr, pchIdentity);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetAuthTicketForWebApi(instancePtr, pchIdentity);
			}
		}

		public static EBeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr instancePtr, byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BeginAuthSession(instancePtr, pAuthTicket, cbAuthTicket, steamID);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BeginAuthSession(instancePtr, pAuthTicket, cbAuthTicket, steamID);
			}
		}

		public static void ISteamUser_EndAuthSession(IntPtr instancePtr, CSteamID steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_EndAuthSession(instancePtr, steamID);
			} else {
				NativeMethodsUnderlying.ISteamUser_EndAuthSession(instancePtr, steamID);
			}
		}

		public static void ISteamUser_CancelAuthTicket(IntPtr instancePtr, HAuthTicket hAuthTicket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_CancelAuthTicket(instancePtr, hAuthTicket);
			} else {
				NativeMethodsUnderlying.ISteamUser_CancelAuthTicket(instancePtr, hAuthTicket);
			}
		}

		public static EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(IntPtr instancePtr, CSteamID steamID, AppId_t appID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_UserHasLicenseForApp(instancePtr, steamID, appID);
			} else {
				return NativeMethodsUnderlying.ISteamUser_UserHasLicenseForApp(instancePtr, steamID, appID);
			}
		}

		public static bool ISteamUser_BIsBehindNAT(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BIsBehindNAT(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BIsBehindNAT(instancePtr);
			}
		}

		public static void ISteamUser_AdvertiseGame(IntPtr instancePtr, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUser_AdvertiseGame(instancePtr, steamIDGameServer, unIPServer, usPortServer);
			} else {
				NativeMethodsUnderlying.ISteamUser_AdvertiseGame(instancePtr, steamIDGameServer, unIPServer, usPortServer);
			}
		}

		public static ulong ISteamUser_RequestEncryptedAppTicket(IntPtr instancePtr, byte[] pDataToInclude, int cbDataToInclude) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_RequestEncryptedAppTicket(instancePtr, pDataToInclude, cbDataToInclude);
			} else {
				return NativeMethodsUnderlying.ISteamUser_RequestEncryptedAppTicket(instancePtr, pDataToInclude, cbDataToInclude);
			}
		}

		public static bool ISteamUser_GetEncryptedAppTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetEncryptedAppTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetEncryptedAppTicket(instancePtr, pTicket, cbMaxTicket, out pcbTicket);
			}
		}

		public static int ISteamUser_GetGameBadgeLevel(IntPtr instancePtr, int nSeries, [MarshalAs(UnmanagedType.I1)] bool bFoil) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetGameBadgeLevel(instancePtr, nSeries, bFoil);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetGameBadgeLevel(instancePtr, nSeries, bFoil);
			}
		}

		public static int ISteamUser_GetPlayerSteamLevel(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetPlayerSteamLevel(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetPlayerSteamLevel(instancePtr);
			}
		}

		public static ulong ISteamUser_RequestStoreAuthURL(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchRedirectURL) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_RequestStoreAuthURL(instancePtr, pchRedirectURL);
			} else {
				return NativeMethodsUnderlying.ISteamUser_RequestStoreAuthURL(instancePtr, pchRedirectURL);
			}
		}

		public static bool ISteamUser_BIsPhoneVerified(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BIsPhoneVerified(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BIsPhoneVerified(instancePtr);
			}
		}

		public static bool ISteamUser_BIsTwoFactorEnabled(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BIsTwoFactorEnabled(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BIsTwoFactorEnabled(instancePtr);
			}
		}

		public static bool ISteamUser_BIsPhoneIdentifying(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BIsPhoneIdentifying(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BIsPhoneIdentifying(instancePtr);
			}
		}

		public static bool ISteamUser_BIsPhoneRequiringVerification(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BIsPhoneRequiringVerification(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BIsPhoneRequiringVerification(instancePtr);
			}
		}

		public static ulong ISteamUser_GetMarketEligibility(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetMarketEligibility(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetMarketEligibility(instancePtr);
			}
		}

		public static ulong ISteamUser_GetDurationControl(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_GetDurationControl(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUser_GetDurationControl(instancePtr);
			}
		}

		public static bool ISteamUser_BSetDurationControlOnlineState(IntPtr instancePtr, EDurationControlOnlineState eNewState) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUser_BSetDurationControlOnlineState(instancePtr, eNewState);
			} else {
				return NativeMethodsUnderlying.ISteamUser_BSetDurationControlOnlineState(instancePtr, eNewState);
			}
		}

		public static bool ISteamUserStats_GetStatInt32(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out int pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetStatInt32(instancePtr, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetStatInt32(instancePtr, pchName, out pData);
			}
		}

		public static bool ISteamUserStats_GetStatFloat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out float pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetStatFloat(instancePtr, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetStatFloat(instancePtr, pchName, out pData);
			}
		}

		public static bool ISteamUserStats_SetStatInt32(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, int nData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_SetStatInt32(instancePtr, pchName, nData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_SetStatInt32(instancePtr, pchName, nData);
			}
		}

		public static bool ISteamUserStats_SetStatFloat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, float fData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_SetStatFloat(instancePtr, pchName, fData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_SetStatFloat(instancePtr, pchName, fData);
			}
		}

		public static bool ISteamUserStats_UpdateAvgRateStat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_UpdateAvgRateStat(instancePtr, pchName, flCountThisSession, dSessionLength);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_UpdateAvgRateStat(instancePtr, pchName, flCountThisSession, dSessionLength);
			}
		}

		public static bool ISteamUserStats_GetAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievement(instancePtr, pchName, out pbAchieved);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievement(instancePtr, pchName, out pbAchieved);
			}
		}

		public static bool ISteamUserStats_SetAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_SetAchievement(instancePtr, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_SetAchievement(instancePtr, pchName);
			}
		}

		public static bool ISteamUserStats_ClearAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_ClearAchievement(instancePtr, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_ClearAchievement(instancePtr, pchName);
			}
		}

		public static bool ISteamUserStats_GetAchievementAndUnlockTime(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementAndUnlockTime(instancePtr, pchName, out pbAchieved, out punUnlockTime);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementAndUnlockTime(instancePtr, pchName, out pbAchieved, out punUnlockTime);
			}
		}

		public static bool ISteamUserStats_StoreStats(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_StoreStats(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_StoreStats(instancePtr);
			}
		}

		public static int ISteamUserStats_GetAchievementIcon(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementIcon(instancePtr, pchName);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementIcon(instancePtr, pchName);
			}
		}

		public static IntPtr ISteamUserStats_GetAchievementDisplayAttribute(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementDisplayAttribute(instancePtr, pchName, pchKey);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementDisplayAttribute(instancePtr, pchName, pchKey);
			}
		}

		public static bool ISteamUserStats_IndicateAchievementProgress(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_IndicateAchievementProgress(instancePtr, pchName, nCurProgress, nMaxProgress);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_IndicateAchievementProgress(instancePtr, pchName, nCurProgress, nMaxProgress);
			}
		}

		public static uint ISteamUserStats_GetNumAchievements(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetNumAchievements(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetNumAchievements(instancePtr);
			}
		}

		public static IntPtr ISteamUserStats_GetAchievementName(IntPtr instancePtr, uint iAchievement) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementName(instancePtr, iAchievement);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementName(instancePtr, iAchievement);
			}
		}

		public static ulong ISteamUserStats_RequestUserStats(IntPtr instancePtr, CSteamID steamIDUser) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_RequestUserStats(instancePtr, steamIDUser);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_RequestUserStats(instancePtr, steamIDUser);
			}
		}

		public static bool ISteamUserStats_GetUserStatInt32(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetUserStatInt32(instancePtr, steamIDUser, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetUserStatInt32(instancePtr, steamIDUser, pchName, out pData);
			}
		}

		public static bool ISteamUserStats_GetUserStatFloat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetUserStatFloat(instancePtr, steamIDUser, pchName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetUserStatFloat(instancePtr, steamIDUser, pchName, out pData);
			}
		}

		public static bool ISteamUserStats_GetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetUserAchievement(instancePtr, steamIDUser, pchName, out pbAchieved);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetUserAchievement(instancePtr, steamIDUser, pchName, out pbAchieved);
			}
		}

		public static bool ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetUserAchievementAndUnlockTime(instancePtr, steamIDUser, pchName, out pbAchieved, out punUnlockTime);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetUserAchievementAndUnlockTime(instancePtr, steamIDUser, pchName, out pbAchieved, out punUnlockTime);
			}
		}

		public static bool ISteamUserStats_ResetAllStats(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bAchievementsToo) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_ResetAllStats(instancePtr, bAchievementsToo);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_ResetAllStats(instancePtr, bAchievementsToo);
			}
		}

		public static ulong ISteamUserStats_FindOrCreateLeaderboard(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_FindOrCreateLeaderboard(instancePtr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_FindOrCreateLeaderboard(instancePtr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}
		}

		public static ulong ISteamUserStats_FindLeaderboard(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchLeaderboardName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_FindLeaderboard(instancePtr, pchLeaderboardName);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_FindLeaderboard(instancePtr, pchLeaderboardName);
			}
		}

		public static IntPtr ISteamUserStats_GetLeaderboardName(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetLeaderboardName(instancePtr, hSteamLeaderboard);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetLeaderboardName(instancePtr, hSteamLeaderboard);
			}
		}

		public static int ISteamUserStats_GetLeaderboardEntryCount(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetLeaderboardEntryCount(instancePtr, hSteamLeaderboard);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetLeaderboardEntryCount(instancePtr, hSteamLeaderboard);
			}
		}

		public static ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetLeaderboardSortMethod(instancePtr, hSteamLeaderboard);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetLeaderboardSortMethod(instancePtr, hSteamLeaderboard);
			}
		}

		public static ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetLeaderboardDisplayType(instancePtr, hSteamLeaderboard);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetLeaderboardDisplayType(instancePtr, hSteamLeaderboard);
			}
		}

		public static ulong ISteamUserStats_DownloadLeaderboardEntries(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_DownloadLeaderboardEntries(instancePtr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_DownloadLeaderboardEntries(instancePtr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}
		}

		public static ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, [In, Out] CSteamID[] prgUsers, int cUsers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_DownloadLeaderboardEntriesForUsers(instancePtr, hSteamLeaderboard, prgUsers, cUsers);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_DownloadLeaderboardEntriesForUsers(instancePtr, hSteamLeaderboard, prgUsers, cUsers);
			}
		}

		public static bool ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr instancePtr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In, Out] int[] pDetails, int cDetailsMax) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetDownloadedLeaderboardEntry(instancePtr, hSteamLeaderboardEntries, index, out pLeaderboardEntry, pDetails, cDetailsMax);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetDownloadedLeaderboardEntry(instancePtr, hSteamLeaderboardEntries, index, out pLeaderboardEntry, pDetails, cDetailsMax);
			}
		}

		public static ulong ISteamUserStats_UploadLeaderboardScore(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In, Out] int[] pScoreDetails, int cScoreDetailsCount) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_UploadLeaderboardScore(instancePtr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_UploadLeaderboardScore(instancePtr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}
		}

		public static ulong ISteamUserStats_AttachLeaderboardUGC(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_AttachLeaderboardUGC(instancePtr, hSteamLeaderboard, hUGC);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_AttachLeaderboardUGC(instancePtr, hSteamLeaderboard, hUGC);
			}
		}

		public static ulong ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetNumberOfCurrentPlayers(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetNumberOfCurrentPlayers(instancePtr);
			}
		}

		public static ulong ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_RequestGlobalAchievementPercentages(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_RequestGlobalAchievementPercentages(instancePtr);
			}
		}

		public static int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr instancePtr, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetMostAchievedAchievementInfo(instancePtr, pchName, unNameBufLen, out pflPercent, out pbAchieved);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetMostAchievedAchievementInfo(instancePtr, pchName, unNameBufLen, out pflPercent, out pbAchieved);
			}
		}

		public static int ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr instancePtr, int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetNextMostAchievedAchievementInfo(instancePtr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, out pbAchieved);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetNextMostAchievedAchievementInfo(instancePtr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, out pbAchieved);
			}
		}

		public static bool ISteamUserStats_GetAchievementAchievedPercent(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out float pflPercent) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementAchievedPercent(instancePtr, pchName, out pflPercent);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementAchievedPercent(instancePtr, pchName, out pflPercent);
			}
		}

		public static ulong ISteamUserStats_RequestGlobalStats(IntPtr instancePtr, int nHistoryDays) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_RequestGlobalStats(instancePtr, nHistoryDays);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_RequestGlobalStats(instancePtr, nHistoryDays);
			}
		}

		public static bool ISteamUserStats_GetGlobalStatInt64(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, out long pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetGlobalStatInt64(instancePtr, pchStatName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetGlobalStatInt64(instancePtr, pchStatName, out pData);
			}
		}

		public static bool ISteamUserStats_GetGlobalStatDouble(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, out double pData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetGlobalStatDouble(instancePtr, pchStatName, out pData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetGlobalStatDouble(instancePtr, pchStatName, out pData);
			}
		}

		public static int ISteamUserStats_GetGlobalStatHistoryInt64(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, [In, Out] long[] pData, uint cubData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetGlobalStatHistoryInt64(instancePtr, pchStatName, pData, cubData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetGlobalStatHistoryInt64(instancePtr, pchStatName, pData, cubData);
			}
		}

		public static int ISteamUserStats_GetGlobalStatHistoryDouble(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, [In, Out] double[] pData, uint cubData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetGlobalStatHistoryDouble(instancePtr, pchStatName, pData, cubData);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetGlobalStatHistoryDouble(instancePtr, pchStatName, pData, cubData);
			}
		}

		public static bool ISteamUserStats_GetAchievementProgressLimitsInt32(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out int pnMinProgress, out int pnMaxProgress) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementProgressLimitsInt32(instancePtr, pchName, out pnMinProgress, out pnMaxProgress);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementProgressLimitsInt32(instancePtr, pchName, out pnMinProgress, out pnMaxProgress);
			}
		}

		public static bool ISteamUserStats_GetAchievementProgressLimitsFloat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out float pfMinProgress, out float pfMaxProgress) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUserStats_GetAchievementProgressLimitsFloat(instancePtr, pchName, out pfMinProgress, out pfMaxProgress);
			} else {
				return NativeMethodsUnderlying.ISteamUserStats_GetAchievementProgressLimitsFloat(instancePtr, pchName, out pfMinProgress, out pfMaxProgress);
			}
		}

		public static uint ISteamUtils_GetSecondsSinceAppActive(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetSecondsSinceAppActive(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetSecondsSinceAppActive(instancePtr);
			}
		}

		public static uint ISteamUtils_GetSecondsSinceComputerActive(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetSecondsSinceComputerActive(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetSecondsSinceComputerActive(instancePtr);
			}
		}

		public static EUniverse ISteamUtils_GetConnectedUniverse(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetConnectedUniverse(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetConnectedUniverse(instancePtr);
			}
		}

		public static uint ISteamUtils_GetServerRealTime(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetServerRealTime(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetServerRealTime(instancePtr);
			}
		}

		public static IntPtr ISteamUtils_GetIPCountry(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetIPCountry(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetIPCountry(instancePtr);
			}
		}

		public static bool ISteamUtils_GetImageSize(IntPtr instancePtr, int iImage, out uint pnWidth, out uint pnHeight) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetImageSize(instancePtr, iImage, out pnWidth, out pnHeight);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetImageSize(instancePtr, iImage, out pnWidth, out pnHeight);
			}
		}

		public static bool ISteamUtils_GetImageRGBA(IntPtr instancePtr, int iImage, byte[] pubDest, int nDestBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetImageRGBA(instancePtr, iImage, pubDest, nDestBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetImageRGBA(instancePtr, iImage, pubDest, nDestBufferSize);
			}
		}

		public static byte ISteamUtils_GetCurrentBatteryPower(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetCurrentBatteryPower(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetCurrentBatteryPower(instancePtr);
			}
		}

		public static uint ISteamUtils_GetAppID(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetAppID(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetAppID(instancePtr);
			}
		}

		public static void ISteamUtils_SetOverlayNotificationPosition(IntPtr instancePtr, ENotificationPosition eNotificationPosition) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_SetOverlayNotificationPosition(instancePtr, eNotificationPosition);
			} else {
				NativeMethodsUnderlying.ISteamUtils_SetOverlayNotificationPosition(instancePtr, eNotificationPosition);
			}
		}

		public static bool ISteamUtils_IsAPICallCompleted(IntPtr instancePtr, SteamAPICall_t hSteamAPICall, out bool pbFailed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsAPICallCompleted(instancePtr, hSteamAPICall, out pbFailed);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsAPICallCompleted(instancePtr, hSteamAPICall, out pbFailed);
			}
		}

		public static ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(IntPtr instancePtr, SteamAPICall_t hSteamAPICall) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetAPICallFailureReason(instancePtr, hSteamAPICall);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetAPICallFailureReason(instancePtr, hSteamAPICall);
			}
		}

		public static bool ISteamUtils_GetAPICallResult(IntPtr instancePtr, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetAPICallResult(instancePtr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetAPICallResult(instancePtr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			}
		}

		public static uint ISteamUtils_GetIPCCallCount(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetIPCCallCount(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetIPCCallCount(instancePtr);
			}
		}

		public static void ISteamUtils_SetWarningMessageHook(IntPtr instancePtr, SteamAPIWarningMessageHook_t pFunction) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_SetWarningMessageHook(instancePtr, pFunction);
			} else {
				NativeMethodsUnderlying.ISteamUtils_SetWarningMessageHook(instancePtr, pFunction);
			}
		}

		public static bool ISteamUtils_IsOverlayEnabled(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsOverlayEnabled(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsOverlayEnabled(instancePtr);
			}
		}

		public static bool ISteamUtils_BOverlayNeedsPresent(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_BOverlayNeedsPresent(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_BOverlayNeedsPresent(instancePtr);
			}
		}

		public static ulong ISteamUtils_CheckFileSignature(IntPtr instancePtr, InteropHelp.UTF8StringHandle szFileName) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_CheckFileSignature(instancePtr, szFileName);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_CheckFileSignature(instancePtr, szFileName);
			}
		}

		public static bool ISteamUtils_ShowGamepadTextInput(IntPtr instancePtr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_ShowGamepadTextInput(instancePtr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_ShowGamepadTextInput(instancePtr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}
		}

		public static uint ISteamUtils_GetEnteredGamepadTextLength(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetEnteredGamepadTextLength(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetEnteredGamepadTextLength(instancePtr);
			}
		}

		public static bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr instancePtr, IntPtr pchText, uint cchText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetEnteredGamepadTextInput(instancePtr, pchText, cchText);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetEnteredGamepadTextInput(instancePtr, pchText, cchText);
			}
		}

		public static IntPtr ISteamUtils_GetSteamUILanguage(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetSteamUILanguage(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetSteamUILanguage(instancePtr);
			}
		}

		public static bool ISteamUtils_IsSteamRunningInVR(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsSteamRunningInVR(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsSteamRunningInVR(instancePtr);
			}
		}

		public static void ISteamUtils_SetOverlayNotificationInset(IntPtr instancePtr, int nHorizontalInset, int nVerticalInset) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_SetOverlayNotificationInset(instancePtr, nHorizontalInset, nVerticalInset);
			} else {
				NativeMethodsUnderlying.ISteamUtils_SetOverlayNotificationInset(instancePtr, nHorizontalInset, nVerticalInset);
			}
		}

		public static bool ISteamUtils_IsSteamInBigPictureMode(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsSteamInBigPictureMode(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsSteamInBigPictureMode(instancePtr);
			}
		}

		public static void ISteamUtils_StartVRDashboard(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_StartVRDashboard(instancePtr);
			} else {
				NativeMethodsUnderlying.ISteamUtils_StartVRDashboard(instancePtr);
			}
		}

		public static bool ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsVRHeadsetStreamingEnabled(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsVRHeadsetStreamingEnabled(instancePtr);
			}
		}

		public static void ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bEnabled) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_SetVRHeadsetStreamingEnabled(instancePtr, bEnabled);
			} else {
				NativeMethodsUnderlying.ISteamUtils_SetVRHeadsetStreamingEnabled(instancePtr, bEnabled);
			}
		}

		public static bool ISteamUtils_IsSteamChinaLauncher(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsSteamChinaLauncher(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsSteamChinaLauncher(instancePtr);
			}
		}

		public static bool ISteamUtils_InitFilterText(IntPtr instancePtr, uint unFilterOptions) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_InitFilterText(instancePtr, unFilterOptions);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_InitFilterText(instancePtr, unFilterOptions);
			}
		}

		public static int ISteamUtils_FilterText(IntPtr instancePtr, ETextFilteringContext eContext, CSteamID sourceSteamID, InteropHelp.UTF8StringHandle pchInputMessage, IntPtr pchOutFilteredText, uint nByteSizeOutFilteredText) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_FilterText(instancePtr, eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_FilterText(instancePtr, eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
			}
		}

		public static ESteamIPv6ConnectivityState ISteamUtils_GetIPv6ConnectivityState(IntPtr instancePtr, ESteamIPv6ConnectivityProtocol eProtocol) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_GetIPv6ConnectivityState(instancePtr, eProtocol);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_GetIPv6ConnectivityState(instancePtr, eProtocol);
			}
		}

		public static bool ISteamUtils_IsSteamRunningOnSteamDeck(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_IsSteamRunningOnSteamDeck(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_IsSteamRunningOnSteamDeck(instancePtr);
			}
		}

		public static bool ISteamUtils_ShowFloatingGamepadTextInput(IntPtr instancePtr, EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_ShowFloatingGamepadTextInput(instancePtr, eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_ShowFloatingGamepadTextInput(instancePtr, eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
			}
		}

		public static void ISteamUtils_SetGameLauncherMode(IntPtr instancePtr, [MarshalAs(UnmanagedType.I1)] bool bLauncherMode) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamUtils_SetGameLauncherMode(instancePtr, bLauncherMode);
			} else {
				NativeMethodsUnderlying.ISteamUtils_SetGameLauncherMode(instancePtr, bLauncherMode);
			}
		}

		public static bool ISteamUtils_DismissFloatingGamepadTextInput(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_DismissFloatingGamepadTextInput(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_DismissFloatingGamepadTextInput(instancePtr);
			}
		}

		public static bool ISteamUtils_DismissGamepadTextInput(IntPtr instancePtr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamUtils_DismissGamepadTextInput(instancePtr);
			} else {
				return NativeMethodsUnderlying.ISteamUtils_DismissGamepadTextInput(instancePtr);
			}
		}

		public static void ISteamVideo_GetVideoURL(IntPtr instancePtr, AppId_t unVideoAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamVideo_GetVideoURL(instancePtr, unVideoAppID);
			} else {
				NativeMethodsUnderlying.ISteamVideo_GetVideoURL(instancePtr, unVideoAppID);
			}
		}

		public static bool ISteamVideo_IsBroadcasting(IntPtr instancePtr, out int pnNumViewers) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamVideo_IsBroadcasting(instancePtr, out pnNumViewers);
			} else {
				return NativeMethodsUnderlying.ISteamVideo_IsBroadcasting(instancePtr, out pnNumViewers);
			}
		}

		public static void ISteamVideo_GetOPFSettings(IntPtr instancePtr, AppId_t unVideoAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.ISteamVideo_GetOPFSettings(instancePtr, unVideoAppID);
			} else {
				NativeMethodsUnderlying.ISteamVideo_GetOPFSettings(instancePtr, unVideoAppID);
			}
		}

		public static bool ISteamVideo_GetOPFStringForApp(IntPtr instancePtr, AppId_t unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.ISteamVideo_GetOPFStringForApp(instancePtr, unVideoAppID, pchBuffer, ref pnBufferSize);
			} else {
				return NativeMethodsUnderlying.ISteamVideo_GetOPFStringForApp(instancePtr, unVideoAppID, pchBuffer, ref pnBufferSize);
			}
		}

	}
}

#endif // !DISABLESTEAMWORKS
