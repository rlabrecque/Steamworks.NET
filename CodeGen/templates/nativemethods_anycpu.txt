// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2025 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if !DISABLESTEAMWORKS

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;
using Environment = System.Environment;

#pragma warning disable IDE0130
namespace Steamworks {
#pragma warning restore
	[System.Security.SuppressUnmanagedCodeSecurity()]
	internal static class NativeMethods {
	// !!!! Changes made to steamapi free functions should also sync with other nativemethods*.txt too. !!!!

#region steam_api.h
		public static ESteamAPIInitResult SteamInternal_SteamAPI_Init(InteropHelp.UTF8StringHandle pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_SteamAPI_Init(pszInternalCheckInterfaceVersions, pOutErrMsg);
			} else {
				return NativeMethodsUnderlying.SteamInternal_SteamAPI_Init(pszInternalCheckInterfaceVersions, pOutErrMsg);
			}
		}

		public static void SteamAPI_Shutdown() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_Shutdown();
			} else {
				NativeMethodsUnderlying.SteamAPI_Shutdown();
			}
		}
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			} else {
				return NativeMethodsUnderlying.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}
		}

		public static void SteamAPI_ReleaseCurrentThreadMemory() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ReleaseCurrentThreadMemory();
			} else {
				NativeMethodsUnderlying.SteamAPI_ReleaseCurrentThreadMemory();
			}
		}

		public static void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_WriteMiniDump(uStructuredExceptionCode, pvExceptionInfo, uBuildID);
			} else {
				NativeMethodsUnderlying.SteamAPI_WriteMiniDump(uStructuredExceptionCode, pvExceptionInfo, uBuildID);
			}
		}

		public static void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetMiniDumpComment(pchMsg);
			} else {
				NativeMethodsUnderlying.SteamAPI_SetMiniDumpComment(pchMsg);
			}
		}

		public static void SteamAPI_RunCallbacks() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RunCallbacks();
			} else {
				NativeMethodsUnderlying.SteamAPI_RunCallbacks();
			}
		}

		public static void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RegisterCallback(pCallback, iCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_RegisterCallback(pCallback, iCallback);
			}
		}

		public static void SteamAPI_UnregisterCallback(IntPtr pCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UnregisterCallback(pCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_UnregisterCallback(pCallback);
			}
		}

		public static void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_RegisterCallResult(pCallback, hAPICall);
			} else {
				NativeMethodsUnderlying.SteamAPI_RegisterCallResult(pCallback, hAPICall);
			}
		}

		public static void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UnregisterCallResult(pCallback, hAPICall);
			} else {
				NativeMethodsUnderlying.SteamAPI_UnregisterCallResult(pCallback, hAPICall);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_IsSteamRunning() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_IsSteamRunning();
			} else {
				return NativeMethodsUnderlying.SteamAPI_IsSteamRunning();
			}
		}

		public static int SteamAPI_GetSteamInstallPath() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetSteamInstallPath();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetSteamInstallPath();
			}
		}

		public static int SteamAPI_GetHSteamPipe() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetHSteamPipe();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetHSteamPipe();
			}
		}

		public static void SteamAPI_SetTryCatchCallbacks([MarshalAs(UnmanagedType.I1)] bool bTryCatchCallbacks) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetTryCatchCallbacks(bTryCatchCallbacks);
			} else {
				NativeMethodsUnderlying.SteamAPI_SetTryCatchCallbacks(bTryCatchCallbacks);
			}
		}

		public static int SteamAPI_GetHSteamUser() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_GetHSteamUser();
			} else {
				return NativeMethodsUnderlying.SteamAPI_GetHSteamUser();
			}
		}

		public static IntPtr SteamInternal_ContextInit(IntPtr pContextInitData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_ContextInit(pContextInitData);
			} else {
				return NativeMethodsUnderlying.SteamInternal_ContextInit(pContextInitData);
			}
		}

		public static IntPtr SteamInternal_CreateInterface(InteropHelp.UTF8StringHandle ver) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_CreateInterface(ver);
			} else {
				return NativeMethodsUnderlying.SteamInternal_CreateInterface(ver);
			}
		}

		public static IntPtr SteamInternal_FindOrCreateUserInterface(HSteamUser hSteamUser, InteropHelp.UTF8StringHandle pszVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			} else {
				return NativeMethodsUnderlying.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			}
		}

		public static IntPtr SteamInternal_FindOrCreateGameServerInterface(HSteamUser hSteamUser, InteropHelp.UTF8StringHandle pszVersion) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			} else {
				return NativeMethodsUnderlying.SteamInternal_FindOrCreateGameServerInterface(hSteamUser, pszVersion);
			}
		}

		public static void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, [MarshalAs(UnmanagedType.I1)] bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_UseBreakpadCrashHandler(pchVersion, pchDate, pchTime, bFullMemoryDumps, pvContext, m_pfnPreMinidumpCallback);
			} else {
				NativeMethodsUnderlying.SteamAPI_UseBreakpadCrashHandler(pchVersion, pchDate, pchTime, bFullMemoryDumps, pvContext, m_pfnPreMinidumpCallback);
			}
		}

		public static void SteamAPI_SetBreakpadAppID(uint unAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SetBreakpadAppID(unAppID);
			} else { 
				NativeMethodsUnderlying.SteamAPI_SetBreakpadAppID(unAppID);
			}
		}

		public static void SteamAPI_ManualDispatch_Init() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_Init();
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_Init();
			}
		}

		public static void SteamAPI_ManualDispatch_RunFrame(HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_RunFrame(hSteamPipe);
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_RunFrame(hSteamPipe);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ManualDispatch_GetNextCallback(HSteamPipe hSteamPipe, IntPtr pCallbackMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_GetNextCallback(hSteamPipe, pCallbackMsg);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ManualDispatch_GetNextCallback(hSteamPipe, pCallbackMsg);
			}
		}

		public static void SteamAPI_ManualDispatch_FreeLastCallback(HSteamPipe hSteamPipe) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_FreeLastCallback(hSteamPipe);
			} else {
				NativeMethodsUnderlying.SteamAPI_ManualDispatch_FreeLastCallback(hSteamPipe);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ManualDispatch_GetAPICallResult(HSteamPipe hSteamPipe, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ManualDispatch_GetAPICallResult(hSteamPipe, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ManualDispatch_GetAPICallResult(hSteamPipe, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, out pbFailed);
			}
		}
		#endregion
		#region steam_gameserver.h
		public static void SteamGameServer_Shutdown() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_Shutdown();
			} else {
				NativeMethodsUnderlying.SteamGameServer_Shutdown();
			}
		}

		public static void SteamGameServer_RunCallbacks() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_RunCallbacks();
			} else {
				NativeMethodsUnderlying.SteamGameServer_RunCallbacks();
			}
		}

		public static void SteamGameServer_ReleaseCurrentThreadMemory() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamGameServer_ReleaseCurrentThreadMemory();
			} else {
				NativeMethodsUnderlying.SteamGameServer_ReleaseCurrentThreadMemory();
			}
		}
		// 写好的方法复制到nativemethods_anycpu.txt

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamGameServer_BSecure() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_BSecure();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_BSecure();
			}
		}

		public static ulong SteamGameServer_GetSteamID() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetSteamID();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetSteamID();
			}
		}

		public static int SteamGameServer_GetHSteamPipe() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetHSteamPipe();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetHSteamPipe();
			}
		}

		public static int SteamGameServer_GetHSteamUser() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServer_GetHSteamUser();
			} else {
				return NativeMethodsUnderlying.SteamGameServer_GetHSteamUser();
			}
		}

		public static ESteamAPIInitResult SteamInternal_GameServer_Init_V2(uint unIP, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString, InteropHelp.UTF8StringHandle pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg) {
			{
				if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
					return NativeMethodsUnderlyingWin64.SteamInternal_GameServer_Init_V2(unIP, usGamePort, usQueryPort, eServerMode, pchVersionString, pszInternalCheckInterfaceVersions, pOutErrMsg);
				} else {
					return NativeMethodsUnderlying.SteamInternal_GameServer_Init_V2(unIP, usGamePort, usQueryPort, eServerMode, pchVersionString, pszInternalCheckInterfaceVersions, pOutErrMsg);
				}
			}
		}
#endregion
#region SteamAPI Accessors
		public static IntPtr SteamClient() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamClient();
			} else {
				return NativeMethodsUnderlying.SteamClient();
			}
		}

		public static IntPtr SteamGameServerClient() {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamGameServerClient();
			} else {
				return NativeMethodsUnderlying.SteamGameServerClient();
			}
		}
		#endregion
		#region SteamNetworkingIPAddr Accessors
		public static void SteamAPI_SteamNetworkingIPAddr_Clear(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_Clear(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_Clear(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref SteamNetworkingIPAddr self, [In, Out] byte[] ipv6, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref self, ipv6, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref self, ipv6, nPort);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref SteamNetworkingIPAddr self, uint nIP, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref self, nIP, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref self, nIP, nPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref self);
			}
		}

		public static uint SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref SteamNetworkingIPAddr self, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref self, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref self, nPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIPAddr_ToString(ref SteamNetworkingIPAddr self, IntPtr buf, uint cbBuf, [MarshalAs(UnmanagedType.I1)] bool bWithPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_ToString(ref self, buf, cbBuf, bWithPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_ToString(ref self, buf, cbBuf, bWithPort);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_ParseString(ref SteamNetworkingIPAddr self, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_ParseString(ref self, pszStr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_ParseString(ref self, pszStr);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref SteamNetworkingIPAddr self, ref SteamNetworkingIPAddr x) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref self, ref x);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref self, ref x);
			}
		}

		public static ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref SteamNetworkingIPAddr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref self);
			}
		}
		#endregion
		#region SteamNetworkingIdentity Accessors
		public static void SteamAPI_SteamNetworkingIdentity_Clear(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_Clear(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_Clear(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsInvalid(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsInvalid(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsInvalid(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetSteamID(ref SteamNetworkingIdentity self, ulong steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetSteamID(ref self, steamID);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetSteamID(ref self, steamID);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetSteamID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetSteamID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetSteamID(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref SteamNetworkingIdentity self, ulong steamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref self, steamID);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref self, steamID);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref self, pszString);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref self, pszString);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetPSNID(ref SteamNetworkingIdentity self, ulong id) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetPSNID(ref self, id);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetPSNID(ref self, id);
			}
		}

		public static ulong SteamAPI_SteamNetworkingIdentity_GetPSNID(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetPSNID(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetPSNID(ref self);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref SteamNetworkingIdentity self, ref SteamNetworkingIPAddr addr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref self, ref addr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref self, ref addr);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref SteamNetworkingIdentity self, uint nIPv4, ushort nPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref self, nIPv4, nPort);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref self, nIPv4, nPort);
			}
		}

		public static uint SteamAPI_SteamNetworkingIdentity_GetIPv4(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetIPv4(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetIPv4(ref self);
			}
		}

		public static ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref self);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetGenericString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetGenericString(ref self, pszString);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetGenericString(ref self, pszString);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericString(ref SteamNetworkingIdentity self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetGenericString(ref self);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetGenericString(ref self);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref SteamNetworkingIdentity self, [In, Out] byte[] data, uint cbLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref self, data, cbLen);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref self, data, cbLen);
			}
		}

		public static IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref SteamNetworkingIdentity self, out int cbLen) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref self, out cbLen);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref self, out cbLen);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref SteamNetworkingIdentity self, ref SteamNetworkingIdentity x) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref self, ref x);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref self, ref x);
			}
		}

		public static void SteamAPI_SteamNetworkingIdentity_ToString(ref SteamNetworkingIdentity self, IntPtr buf, uint cbBuf) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_ToString(ref self, buf, cbBuf);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_ToString(ref self, buf, cbBuf);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_SteamNetworkingIdentity_ParseString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszStr) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingIdentity_ParseString(ref self, pszStr);
			} else {
				return NativeMethodsUnderlying.SteamAPI_SteamNetworkingIdentity_ParseString(ref self, pszStr);
			}
		}
		#endregion
		#region SteamNetworkingMessage_t Accessors
		public static void SteamAPI_SteamNetworkingMessage_t_Release(IntPtr self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_SteamNetworkingMessage_t_Release(self);
			} else {
				NativeMethodsUnderlying.SteamAPI_SteamNetworkingMessage_t_Release(self);
			}
		}
		#endregion
		#region ISteamNetworkingConnectionSignaling Accessors
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref ISteamNetworkingConnectionSignaling self, HSteamNetConnection hConn, ref SteamNetConnectionInfo_t info, IntPtr pMsg, int cbMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref self, hConn, ref info, pMsg, cbMsg);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref self, hConn, ref info, pMsg, cbMsg);
			}
		}

		public static void SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref ISteamNetworkingConnectionSignaling self) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref self);
			} else {
				NativeMethodsUnderlying.SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref self);
			}
		}
		#endregion
		#region ISteamNetworkingSignalingRecvContext Accessors
		public static IntPtr SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref ISteamNetworkingSignalingRecvContext self,
			HSteamNetConnection hConn, ref SteamNetworkingIdentity identityPeer, int nLocalVirtualPort) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref self, hConn, ref identityPeer, nLocalVirtualPort);
			} else {
				return NativeMethodsUnderlying.SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref self, hConn, ref identityPeer, nLocalVirtualPort);
			}
		}

		public static void SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref ISteamNetworkingSignalingRecvContext self,
			ref SteamNetworkingIdentity identityPeer, IntPtr pMsg, int cbMsg) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref self, ref identityPeer, pMsg, cbMsg);
			} else {
				NativeMethodsUnderlying.SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref self, ref identityPeer, pMsg, cbMsg);
			}
		}
		#endregion
		#region steamencryptedappticket.h
		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BDecryptTicket([In, Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted,
			[In, Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted,
			[MarshalAs(UnmanagedType.LPArray, SizeConst=Constants.k_nSteamEncryptedAppTicketSymmetricKeyLen)] byte[] rgubKey, int cubKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BDecryptTicket(rgubTicketEncrypted, cubTicketEncrypted, rgubTicketDecrypted, ref pcubTicketDecrypted,
					rgubKey, cubKey);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BDecryptTicket(rgubTicketEncrypted, cubTicketEncrypted, rgubTicketDecrypted, ref pcubTicketDecrypted,
					rgubKey, cubKey);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsTicketForApp([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsTicketForApp(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsTicketForApp(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			}
		}

		public static uint SteamEncryptedAppTicket_GetTicketIssueTime([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketIssueTime(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketIssueTime(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		public static void SteamEncryptedAppTicket_GetTicketSteamID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketSteamID(rgubTicketDecrypted, cubTicketDecrypted, out psteamID);
			} else {
				NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketSteamID(rgubTicketDecrypted, cubTicketDecrypted, out psteamID);
			}
		}

		public static uint SteamEncryptedAppTicket_GetTicketAppID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetTicketAppID(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetTicketAppID(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BUserOwnsAppInTicket([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BUserOwnsAppInTicket(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BUserOwnsAppInTicket(rgubTicketDecrypted, cubTicketDecrypted, nAppID);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BUserIsVacBanned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BUserIsVacBanned(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BUserIsVacBanned(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		public static IntPtr SteamEncryptedAppTicket_GetUserVariableData([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_GetUserVariableData(rgubTicketDecrypted, cubTicketDecrypted, out pcubUserData);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_GetUserVariableData(rgubTicketDecrypted, cubTicketDecrypted, out pcubUserData);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsTicketSigned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, [In, Out] byte[] pubRSAKey, uint cubRSAKey) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsTicketSigned(rgubTicketDecrypted, cubTicketDecrypted, pubRSAKey, cubRSAKey);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsTicketSigned(rgubTicketDecrypted, cubTicketDecrypted, pubRSAKey, cubRSAKey);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsLicenseBorrowed([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsLicenseBorrowed(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsLicenseBorrowed(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}

		[return: MarshalAs(UnmanagedType.I1)]
		public static bool SteamEncryptedAppTicket_BIsLicenseTemporary([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted) {
			if (Environment.Is64BitProcess && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
				return NativeMethodsUnderlyingWin64.SteamEncryptedAppTicket_BIsLicenseTemporary(rgubTicketDecrypted, cubTicketDecrypted);
			} else {
				return NativeMethodsUnderlying.SteamEncryptedAppTicket_BIsLicenseTemporary(rgubTicketDecrypted, cubTicketDecrypted);
			}
		}
#endregion
