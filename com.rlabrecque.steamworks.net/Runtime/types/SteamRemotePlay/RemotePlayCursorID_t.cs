// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2022 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if !(UNITY_STANDALONE_WIN || UNITY_STANDALONE_LINUX || UNITY_STANDALONE_OSX || STEAMWORKS_WIN || STEAMWORKS_LIN_OSX)
	#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks {
	[System.Serializable]
	public struct RemotePlayCursorID_t : System.IEquatable<RemotePlayCursorID_t>, System.IComparable<RemotePlayCursorID_t> {
		public uint m_RemotePlayCursorID;

		public RemotePlayCursorID_t(uint value) {
			m_RemotePlayCursorID = value;
		}

		public override string ToString() {
			return m_RemotePlayCursorID.ToString();
		}

		public override bool Equals(object other) {
			return other is RemotePlayCursorID_t && this == (RemotePlayCursorID_t)other;
		}

		public override int GetHashCode() {
			return m_RemotePlayCursorID.GetHashCode();
		}

		public static bool operator ==(RemotePlayCursorID_t x, RemotePlayCursorID_t y) {
			return x.m_RemotePlayCursorID == y.m_RemotePlayCursorID;
		}

		public static bool operator !=(RemotePlayCursorID_t x, RemotePlayCursorID_t y) {
			return !(x == y);
		}

		public static explicit operator RemotePlayCursorID_t(uint value) {
			return new RemotePlayCursorID_t(value);
		}

		public static explicit operator uint(RemotePlayCursorID_t that) {
			return that.m_RemotePlayCursorID;
		}

		public bool Equals(RemotePlayCursorID_t other) {
			return m_RemotePlayCursorID == other.m_RemotePlayCursorID;
		}

		public int CompareTo(RemotePlayCursorID_t other) {
			return m_RemotePlayCursorID.CompareTo(other.m_RemotePlayCursorID);
		}
	}
}

#endif // !DISABLESTEAMWORKS
