// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if !(UNITY_STANDALONE_WIN || UNITY_STANDALONE_LINUX || UNITY_STANDALONE_OSX || STEAMWORKS_WIN || STEAMWORKS_LIN_OSX)
	#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks {
	[System.Serializable]
	public struct HTTPRequestHandle : System.IEquatable<HTTPRequestHandle>, System.IComparable<HTTPRequestHandle> {
		public static readonly HTTPRequestHandle Invalid = new HTTPRequestHandle(0);
		public uint m_HTTPRequestHandle;

		public HTTPRequestHandle(uint value) {
			m_HTTPRequestHandle = value;
		}

		public override string ToString() {
			return m_HTTPRequestHandle.ToString();
		}

		public override bool Equals(object other) {
			return other is HTTPRequestHandle && this == (HTTPRequestHandle)other;
		}

		public override int GetHashCode() {
			return m_HTTPRequestHandle.GetHashCode();
		}

		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y) {
			return x.m_HTTPRequestHandle == y.m_HTTPRequestHandle;
		}

		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y) {
			return !(x == y);
		}

		public static explicit operator HTTPRequestHandle(uint value) {
			return new HTTPRequestHandle(value);
		}

		public static explicit operator uint(HTTPRequestHandle that) {
			return that.m_HTTPRequestHandle;
		}

		public bool Equals(HTTPRequestHandle other) {
			return m_HTTPRequestHandle == other.m_HTTPRequestHandle;
		}

		public int CompareTo(HTTPRequestHandle other) {
			return m_HTTPRequestHandle.CompareTo(other.m_HTTPRequestHandle);
		}
	}
}

#endif // !DISABLESTEAMWORKS
